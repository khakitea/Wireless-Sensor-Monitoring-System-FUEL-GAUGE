
I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038f4  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08003a34  08003a34  00013a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003ae0  08003ae0  00013ae0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003ae4  08003ae4  00013ae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000008  08003ae8  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000007c  20000014  08003af4  00020014  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000090  08003af4  00020090  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000d407  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001fa2  00000000  00000000  0002d44b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000011a8  00000000  00000000  0002f3f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000010c0  00000000  00000000  00030598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00020fd5  00000000  00000000  00031658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000f867  00000000  00000000  0005262d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000d2667  00000000  00000000  00061e94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001344fb  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000049bc  00000000  00000000  0013454c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000014 	.word	0x20000014
 800015c:	00000000 	.word	0x00000000
 8000160:	08003a1c 	.word	0x08003a1c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000018 	.word	0x20000018
 800017c:	08003a1c 	.word	0x08003a1c

08000180 <__aeabi_dmul>:
 8000180:	b570      	push	{r4, r5, r6, lr}
 8000182:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000186:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800018a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800018e:	bf1d      	ittte	ne
 8000190:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000194:	ea94 0f0c 	teqne	r4, ip
 8000198:	ea95 0f0c 	teqne	r5, ip
 800019c:	f000 f8de 	bleq	800035c <__aeabi_dmul+0x1dc>
 80001a0:	442c      	add	r4, r5
 80001a2:	ea81 0603 	eor.w	r6, r1, r3
 80001a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001b2:	bf18      	it	ne
 80001b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80001b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80001bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80001c0:	d038      	beq.n	8000234 <__aeabi_dmul+0xb4>
 80001c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80001c6:	f04f 0500 	mov.w	r5, #0
 80001ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001d6:	f04f 0600 	mov.w	r6, #0
 80001da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001de:	f09c 0f00 	teq	ip, #0
 80001e2:	bf18      	it	ne
 80001e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001f4:	d204      	bcs.n	8000200 <__aeabi_dmul+0x80>
 80001f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001fa:	416d      	adcs	r5, r5
 80001fc:	eb46 0606 	adc.w	r6, r6, r6
 8000200:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000204:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000208:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800020c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000210:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000214:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000218:	bf88      	it	hi
 800021a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800021e:	d81e      	bhi.n	800025e <__aeabi_dmul+0xde>
 8000220:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000224:	bf08      	it	eq
 8000226:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800022a:	f150 0000 	adcs.w	r0, r0, #0
 800022e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000232:	bd70      	pop	{r4, r5, r6, pc}
 8000234:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000238:	ea46 0101 	orr.w	r1, r6, r1
 800023c:	ea40 0002 	orr.w	r0, r0, r2
 8000240:	ea81 0103 	eor.w	r1, r1, r3
 8000244:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000248:	bfc2      	ittt	gt
 800024a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800024e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000252:	bd70      	popgt	{r4, r5, r6, pc}
 8000254:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000258:	f04f 0e00 	mov.w	lr, #0
 800025c:	3c01      	subs	r4, #1
 800025e:	f300 80ab 	bgt.w	80003b8 <__aeabi_dmul+0x238>
 8000262:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000266:	bfde      	ittt	le
 8000268:	2000      	movle	r0, #0
 800026a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800026e:	bd70      	pople	{r4, r5, r6, pc}
 8000270:	f1c4 0400 	rsb	r4, r4, #0
 8000274:	3c20      	subs	r4, #32
 8000276:	da35      	bge.n	80002e4 <__aeabi_dmul+0x164>
 8000278:	340c      	adds	r4, #12
 800027a:	dc1b      	bgt.n	80002b4 <__aeabi_dmul+0x134>
 800027c:	f104 0414 	add.w	r4, r4, #20
 8000280:	f1c4 0520 	rsb	r5, r4, #32
 8000284:	fa00 f305 	lsl.w	r3, r0, r5
 8000288:	fa20 f004 	lsr.w	r0, r0, r4
 800028c:	fa01 f205 	lsl.w	r2, r1, r5
 8000290:	ea40 0002 	orr.w	r0, r0, r2
 8000294:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000298:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800029c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a0:	fa21 f604 	lsr.w	r6, r1, r4
 80002a4:	eb42 0106 	adc.w	r1, r2, r6
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 040c 	rsb	r4, r4, #12
 80002b8:	f1c4 0520 	rsb	r5, r4, #32
 80002bc:	fa00 f304 	lsl.w	r3, r0, r4
 80002c0:	fa20 f005 	lsr.w	r0, r0, r5
 80002c4:	fa01 f204 	lsl.w	r2, r1, r4
 80002c8:	ea40 0002 	orr.w	r0, r0, r2
 80002cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002dc:	bf08      	it	eq
 80002de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002e2:	bd70      	pop	{r4, r5, r6, pc}
 80002e4:	f1c4 0520 	rsb	r5, r4, #32
 80002e8:	fa00 f205 	lsl.w	r2, r0, r5
 80002ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80002f0:	fa20 f304 	lsr.w	r3, r0, r4
 80002f4:	fa01 f205 	lsl.w	r2, r1, r5
 80002f8:	ea43 0302 	orr.w	r3, r3, r2
 80002fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000300:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000304:	fa21 f204 	lsr.w	r2, r1, r4
 8000308:	ea20 0002 	bic.w	r0, r0, r2
 800030c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000310:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000314:	bf08      	it	eq
 8000316:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800031a:	bd70      	pop	{r4, r5, r6, pc}
 800031c:	f094 0f00 	teq	r4, #0
 8000320:	d10f      	bne.n	8000342 <__aeabi_dmul+0x1c2>
 8000322:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000326:	0040      	lsls	r0, r0, #1
 8000328:	eb41 0101 	adc.w	r1, r1, r1
 800032c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000330:	bf08      	it	eq
 8000332:	3c01      	subeq	r4, #1
 8000334:	d0f7      	beq.n	8000326 <__aeabi_dmul+0x1a6>
 8000336:	ea41 0106 	orr.w	r1, r1, r6
 800033a:	f095 0f00 	teq	r5, #0
 800033e:	bf18      	it	ne
 8000340:	4770      	bxne	lr
 8000342:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000346:	0052      	lsls	r2, r2, #1
 8000348:	eb43 0303 	adc.w	r3, r3, r3
 800034c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000350:	bf08      	it	eq
 8000352:	3d01      	subeq	r5, #1
 8000354:	d0f7      	beq.n	8000346 <__aeabi_dmul+0x1c6>
 8000356:	ea43 0306 	orr.w	r3, r3, r6
 800035a:	4770      	bx	lr
 800035c:	ea94 0f0c 	teq	r4, ip
 8000360:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000364:	bf18      	it	ne
 8000366:	ea95 0f0c 	teqne	r5, ip
 800036a:	d00c      	beq.n	8000386 <__aeabi_dmul+0x206>
 800036c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000370:	bf18      	it	ne
 8000372:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000376:	d1d1      	bne.n	800031c <__aeabi_dmul+0x19c>
 8000378:	ea81 0103 	eor.w	r1, r1, r3
 800037c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000380:	f04f 0000 	mov.w	r0, #0
 8000384:	bd70      	pop	{r4, r5, r6, pc}
 8000386:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800038a:	bf06      	itte	eq
 800038c:	4610      	moveq	r0, r2
 800038e:	4619      	moveq	r1, r3
 8000390:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000394:	d019      	beq.n	80003ca <__aeabi_dmul+0x24a>
 8000396:	ea94 0f0c 	teq	r4, ip
 800039a:	d102      	bne.n	80003a2 <__aeabi_dmul+0x222>
 800039c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003a0:	d113      	bne.n	80003ca <__aeabi_dmul+0x24a>
 80003a2:	ea95 0f0c 	teq	r5, ip
 80003a6:	d105      	bne.n	80003b4 <__aeabi_dmul+0x234>
 80003a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003ac:	bf1c      	itt	ne
 80003ae:	4610      	movne	r0, r2
 80003b0:	4619      	movne	r1, r3
 80003b2:	d10a      	bne.n	80003ca <__aeabi_dmul+0x24a>
 80003b4:	ea81 0103 	eor.w	r1, r1, r3
 80003b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c4:	f04f 0000 	mov.w	r0, #0
 80003c8:	bd70      	pop	{r4, r5, r6, pc}
 80003ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003d2:	bd70      	pop	{r4, r5, r6, pc}

080003d4 <__aeabi_drsub>:
 80003d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003d8:	e002      	b.n	80003e0 <__adddf3>
 80003da:	bf00      	nop

080003dc <__aeabi_dsub>:
 80003dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003e0 <__adddf3>:
 80003e0:	b530      	push	{r4, r5, lr}
 80003e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ea:	ea94 0f05 	teq	r4, r5
 80003ee:	bf08      	it	eq
 80003f0:	ea90 0f02 	teqeq	r0, r2
 80003f4:	bf1f      	itttt	ne
 80003f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000402:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000406:	f000 80e2 	beq.w	80005ce <__adddf3+0x1ee>
 800040a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800040e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000412:	bfb8      	it	lt
 8000414:	426d      	neglt	r5, r5
 8000416:	dd0c      	ble.n	8000432 <__adddf3+0x52>
 8000418:	442c      	add	r4, r5
 800041a:	ea80 0202 	eor.w	r2, r0, r2
 800041e:	ea81 0303 	eor.w	r3, r1, r3
 8000422:	ea82 0000 	eor.w	r0, r2, r0
 8000426:	ea83 0101 	eor.w	r1, r3, r1
 800042a:	ea80 0202 	eor.w	r2, r0, r2
 800042e:	ea81 0303 	eor.w	r3, r1, r3
 8000432:	2d36      	cmp	r5, #54	; 0x36
 8000434:	bf88      	it	hi
 8000436:	bd30      	pophi	{r4, r5, pc}
 8000438:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800043c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000440:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000444:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000448:	d002      	beq.n	8000450 <__adddf3+0x70>
 800044a:	4240      	negs	r0, r0
 800044c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000450:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000454:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000458:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800045c:	d002      	beq.n	8000464 <__adddf3+0x84>
 800045e:	4252      	negs	r2, r2
 8000460:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000464:	ea94 0f05 	teq	r4, r5
 8000468:	f000 80a7 	beq.w	80005ba <__adddf3+0x1da>
 800046c:	f1a4 0401 	sub.w	r4, r4, #1
 8000470:	f1d5 0e20 	rsbs	lr, r5, #32
 8000474:	db0d      	blt.n	8000492 <__adddf3+0xb2>
 8000476:	fa02 fc0e 	lsl.w	ip, r2, lr
 800047a:	fa22 f205 	lsr.w	r2, r2, r5
 800047e:	1880      	adds	r0, r0, r2
 8000480:	f141 0100 	adc.w	r1, r1, #0
 8000484:	fa03 f20e 	lsl.w	r2, r3, lr
 8000488:	1880      	adds	r0, r0, r2
 800048a:	fa43 f305 	asr.w	r3, r3, r5
 800048e:	4159      	adcs	r1, r3
 8000490:	e00e      	b.n	80004b0 <__adddf3+0xd0>
 8000492:	f1a5 0520 	sub.w	r5, r5, #32
 8000496:	f10e 0e20 	add.w	lr, lr, #32
 800049a:	2a01      	cmp	r2, #1
 800049c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004a0:	bf28      	it	cs
 80004a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004a6:	fa43 f305 	asr.w	r3, r3, r5
 80004aa:	18c0      	adds	r0, r0, r3
 80004ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004b4:	d507      	bpl.n	80004c6 <__adddf3+0xe6>
 80004b6:	f04f 0e00 	mov.w	lr, #0
 80004ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80004be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80004c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004ca:	d31b      	bcc.n	8000504 <__adddf3+0x124>
 80004cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004d0:	d30c      	bcc.n	80004ec <__adddf3+0x10c>
 80004d2:	0849      	lsrs	r1, r1, #1
 80004d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004dc:	f104 0401 	add.w	r4, r4, #1
 80004e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004e8:	f080 809a 	bcs.w	8000620 <__adddf3+0x240>
 80004ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004f0:	bf08      	it	eq
 80004f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004f6:	f150 0000 	adcs.w	r0, r0, #0
 80004fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004fe:	ea41 0105 	orr.w	r1, r1, r5
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000508:	4140      	adcs	r0, r0
 800050a:	eb41 0101 	adc.w	r1, r1, r1
 800050e:	3c01      	subs	r4, #1
 8000510:	bf28      	it	cs
 8000512:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000516:	d2e9      	bcs.n	80004ec <__adddf3+0x10c>
 8000518:	f091 0f00 	teq	r1, #0
 800051c:	bf04      	itt	eq
 800051e:	4601      	moveq	r1, r0
 8000520:	2000      	moveq	r0, #0
 8000522:	fab1 f381 	clz	r3, r1
 8000526:	bf08      	it	eq
 8000528:	3320      	addeq	r3, #32
 800052a:	f1a3 030b 	sub.w	r3, r3, #11
 800052e:	f1b3 0220 	subs.w	r2, r3, #32
 8000532:	da0c      	bge.n	800054e <__adddf3+0x16e>
 8000534:	320c      	adds	r2, #12
 8000536:	dd08      	ble.n	800054a <__adddf3+0x16a>
 8000538:	f102 0c14 	add.w	ip, r2, #20
 800053c:	f1c2 020c 	rsb	r2, r2, #12
 8000540:	fa01 f00c 	lsl.w	r0, r1, ip
 8000544:	fa21 f102 	lsr.w	r1, r1, r2
 8000548:	e00c      	b.n	8000564 <__adddf3+0x184>
 800054a:	f102 0214 	add.w	r2, r2, #20
 800054e:	bfd8      	it	le
 8000550:	f1c2 0c20 	rsble	ip, r2, #32
 8000554:	fa01 f102 	lsl.w	r1, r1, r2
 8000558:	fa20 fc0c 	lsr.w	ip, r0, ip
 800055c:	bfdc      	itt	le
 800055e:	ea41 010c 	orrle.w	r1, r1, ip
 8000562:	4090      	lslle	r0, r2
 8000564:	1ae4      	subs	r4, r4, r3
 8000566:	bfa2      	ittt	ge
 8000568:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800056c:	4329      	orrge	r1, r5
 800056e:	bd30      	popge	{r4, r5, pc}
 8000570:	ea6f 0404 	mvn.w	r4, r4
 8000574:	3c1f      	subs	r4, #31
 8000576:	da1c      	bge.n	80005b2 <__adddf3+0x1d2>
 8000578:	340c      	adds	r4, #12
 800057a:	dc0e      	bgt.n	800059a <__adddf3+0x1ba>
 800057c:	f104 0414 	add.w	r4, r4, #20
 8000580:	f1c4 0220 	rsb	r2, r4, #32
 8000584:	fa20 f004 	lsr.w	r0, r0, r4
 8000588:	fa01 f302 	lsl.w	r3, r1, r2
 800058c:	ea40 0003 	orr.w	r0, r0, r3
 8000590:	fa21 f304 	lsr.w	r3, r1, r4
 8000594:	ea45 0103 	orr.w	r1, r5, r3
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	f1c4 040c 	rsb	r4, r4, #12
 800059e:	f1c4 0220 	rsb	r2, r4, #32
 80005a2:	fa20 f002 	lsr.w	r0, r0, r2
 80005a6:	fa01 f304 	lsl.w	r3, r1, r4
 80005aa:	ea40 0003 	orr.w	r0, r0, r3
 80005ae:	4629      	mov	r1, r5
 80005b0:	bd30      	pop	{r4, r5, pc}
 80005b2:	fa21 f004 	lsr.w	r0, r1, r4
 80005b6:	4629      	mov	r1, r5
 80005b8:	bd30      	pop	{r4, r5, pc}
 80005ba:	f094 0f00 	teq	r4, #0
 80005be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005c2:	bf06      	itte	eq
 80005c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005c8:	3401      	addeq	r4, #1
 80005ca:	3d01      	subne	r5, #1
 80005cc:	e74e      	b.n	800046c <__adddf3+0x8c>
 80005ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005d2:	bf18      	it	ne
 80005d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005d8:	d029      	beq.n	800062e <__adddf3+0x24e>
 80005da:	ea94 0f05 	teq	r4, r5
 80005de:	bf08      	it	eq
 80005e0:	ea90 0f02 	teqeq	r0, r2
 80005e4:	d005      	beq.n	80005f2 <__adddf3+0x212>
 80005e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ea:	bf04      	itt	eq
 80005ec:	4619      	moveq	r1, r3
 80005ee:	4610      	moveq	r0, r2
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	ea91 0f03 	teq	r1, r3
 80005f6:	bf1e      	ittt	ne
 80005f8:	2100      	movne	r1, #0
 80005fa:	2000      	movne	r0, #0
 80005fc:	bd30      	popne	{r4, r5, pc}
 80005fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000602:	d105      	bne.n	8000610 <__adddf3+0x230>
 8000604:	0040      	lsls	r0, r0, #1
 8000606:	4149      	adcs	r1, r1
 8000608:	bf28      	it	cs
 800060a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800060e:	bd30      	pop	{r4, r5, pc}
 8000610:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000614:	bf3c      	itt	cc
 8000616:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800061a:	bd30      	popcc	{r4, r5, pc}
 800061c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000620:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000624:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000628:	f04f 0000 	mov.w	r0, #0
 800062c:	bd30      	pop	{r4, r5, pc}
 800062e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000632:	bf1a      	itte	ne
 8000634:	4619      	movne	r1, r3
 8000636:	4610      	movne	r0, r2
 8000638:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800063c:	bf1c      	itt	ne
 800063e:	460b      	movne	r3, r1
 8000640:	4602      	movne	r2, r0
 8000642:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000646:	bf06      	itte	eq
 8000648:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800064c:	ea91 0f03 	teqeq	r1, r3
 8000650:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000654:	bd30      	pop	{r4, r5, pc}
 8000656:	bf00      	nop

08000658 <__aeabi_ui2d>:
 8000658:	f090 0f00 	teq	r0, #0
 800065c:	bf04      	itt	eq
 800065e:	2100      	moveq	r1, #0
 8000660:	4770      	bxeq	lr
 8000662:	b530      	push	{r4, r5, lr}
 8000664:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000668:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800066c:	f04f 0500 	mov.w	r5, #0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e750      	b.n	8000518 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_i2d>:
 8000678:	f090 0f00 	teq	r0, #0
 800067c:	bf04      	itt	eq
 800067e:	2100      	moveq	r1, #0
 8000680:	4770      	bxeq	lr
 8000682:	b530      	push	{r4, r5, lr}
 8000684:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000688:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800068c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000690:	bf48      	it	mi
 8000692:	4240      	negmi	r0, r0
 8000694:	f04f 0100 	mov.w	r1, #0
 8000698:	e73e      	b.n	8000518 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_f2d>:
 800069c:	0042      	lsls	r2, r0, #1
 800069e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006aa:	bf1f      	itttt	ne
 80006ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80006b8:	4770      	bxne	lr
 80006ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80006be:	bf08      	it	eq
 80006c0:	4770      	bxeq	lr
 80006c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006c6:	bf04      	itt	eq
 80006c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006cc:	4770      	bxeq	lr
 80006ce:	b530      	push	{r4, r5, lr}
 80006d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	e71c      	b.n	8000518 <__adddf3+0x138>
 80006de:	bf00      	nop

080006e0 <__aeabi_ul2d>:
 80006e0:	ea50 0201 	orrs.w	r2, r0, r1
 80006e4:	bf08      	it	eq
 80006e6:	4770      	bxeq	lr
 80006e8:	b530      	push	{r4, r5, lr}
 80006ea:	f04f 0500 	mov.w	r5, #0
 80006ee:	e00a      	b.n	8000706 <__aeabi_l2d+0x16>

080006f0 <__aeabi_l2d>:
 80006f0:	ea50 0201 	orrs.w	r2, r0, r1
 80006f4:	bf08      	it	eq
 80006f6:	4770      	bxeq	lr
 80006f8:	b530      	push	{r4, r5, lr}
 80006fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006fe:	d502      	bpl.n	8000706 <__aeabi_l2d+0x16>
 8000700:	4240      	negs	r0, r0
 8000702:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000706:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800070a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800070e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000712:	f43f aed8 	beq.w	80004c6 <__adddf3+0xe6>
 8000716:	f04f 0203 	mov.w	r2, #3
 800071a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800071e:	bf18      	it	ne
 8000720:	3203      	addne	r2, #3
 8000722:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000726:	bf18      	it	ne
 8000728:	3203      	addne	r2, #3
 800072a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800072e:	f1c2 0320 	rsb	r3, r2, #32
 8000732:	fa00 fc03 	lsl.w	ip, r0, r3
 8000736:	fa20 f002 	lsr.w	r0, r0, r2
 800073a:	fa01 fe03 	lsl.w	lr, r1, r3
 800073e:	ea40 000e 	orr.w	r0, r0, lr
 8000742:	fa21 f102 	lsr.w	r1, r1, r2
 8000746:	4414      	add	r4, r2
 8000748:	e6bd      	b.n	80004c6 <__adddf3+0xe6>
 800074a:	bf00      	nop

0800074c <__aeabi_d2f>:
 800074c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000750:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000754:	bf24      	itt	cs
 8000756:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800075a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800075e:	d90d      	bls.n	800077c <__aeabi_d2f+0x30>
 8000760:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000764:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000768:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800076c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000770:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000774:	bf08      	it	eq
 8000776:	f020 0001 	biceq.w	r0, r0, #1
 800077a:	4770      	bx	lr
 800077c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000780:	d121      	bne.n	80007c6 <__aeabi_d2f+0x7a>
 8000782:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000786:	bfbc      	itt	lt
 8000788:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800078c:	4770      	bxlt	lr
 800078e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000792:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000796:	f1c2 0218 	rsb	r2, r2, #24
 800079a:	f1c2 0c20 	rsb	ip, r2, #32
 800079e:	fa10 f30c 	lsls.w	r3, r0, ip
 80007a2:	fa20 f002 	lsr.w	r0, r0, r2
 80007a6:	bf18      	it	ne
 80007a8:	f040 0001 	orrne.w	r0, r0, #1
 80007ac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007b0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80007b4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80007b8:	ea40 000c 	orr.w	r0, r0, ip
 80007bc:	fa23 f302 	lsr.w	r3, r3, r2
 80007c0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80007c4:	e7cc      	b.n	8000760 <__aeabi_d2f+0x14>
 80007c6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80007ca:	d107      	bne.n	80007dc <__aeabi_d2f+0x90>
 80007cc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80007d0:	bf1e      	ittt	ne
 80007d2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80007d6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80007da:	4770      	bxne	lr
 80007dc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80007e0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80007e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop

080007ec <MAX17043_Init>:
#define MAX17043_I2C_ADDRESS 0x36
#define MAX17043_I2C_ADDR 0x36


void MAX17043_Init(I2C_HandleTypeDef *hi2c)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b086      	sub	sp, #24
 80007f0:	af02      	add	r7, sp, #8
 80007f2:	6078      	str	r0, [r7, #4]
  uint8_t configReg[] = {0x02, 0x80};
 80007f4:	f248 0302 	movw	r3, #32770	; 0x8002
 80007f8:	81bb      	strh	r3, [r7, #12]
  HAL_I2C_Master_Transmit(hi2c, MAX17043_I2C_ADDRESS, configReg, sizeof(configReg), HAL_MAX_DELAY);
 80007fa:	f107 020c 	add.w	r2, r7, #12
 80007fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000802:	9300      	str	r3, [sp, #0]
 8000804:	2302      	movs	r3, #2
 8000806:	2136      	movs	r1, #54	; 0x36
 8000808:	6878      	ldr	r0, [r7, #4]
 800080a:	f000 fe3d 	bl	8001488 <HAL_I2C_Master_Transmit>
}
 800080e:	bf00      	nop
 8000810:	3710      	adds	r7, #16
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
	...

08000818 <MAX17043_ReadVoltage>:

  return voltage;
}*/

float MAX17043_ReadVoltage(I2C_HandleTypeDef *hi2c)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b088      	sub	sp, #32
 800081c:	af02      	add	r7, sp, #8
 800081e:	6078      	str	r0, [r7, #4]
  uint8_t txData[2];
  uint8_t rxData[2];

  txData[0] = 0x02; // Register address for VCELL
 8000820:	2302      	movs	r3, #2
 8000822:	733b      	strb	r3, [r7, #12]
  txData[1] = 0x00;
 8000824:	2300      	movs	r3, #0
 8000826:	737b      	strb	r3, [r7, #13]

  HAL_I2C_Master_Transmit(hi2c, MAX17043_I2C_ADDR << 1, txData, 1, HAL_MAX_DELAY);
 8000828:	f107 020c 	add.w	r2, r7, #12
 800082c:	f04f 33ff 	mov.w	r3, #4294967295
 8000830:	9300      	str	r3, [sp, #0]
 8000832:	2301      	movs	r3, #1
 8000834:	216c      	movs	r1, #108	; 0x6c
 8000836:	6878      	ldr	r0, [r7, #4]
 8000838:	f000 fe26 	bl	8001488 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(hi2c, MAX17043_I2C_ADDR << 1, rxData, 2, HAL_MAX_DELAY);
 800083c:	f107 0208 	add.w	r2, r7, #8
 8000840:	f04f 33ff 	mov.w	r3, #4294967295
 8000844:	9300      	str	r3, [sp, #0]
 8000846:	2302      	movs	r3, #2
 8000848:	216c      	movs	r1, #108	; 0x6c
 800084a:	6878      	ldr	r0, [r7, #4]
 800084c:	f000 ff10 	bl	8001670 <HAL_I2C_Master_Receive>

  uint16_t voltage = (rxData[0] << 8) | rxData[1];
 8000850:	7a3b      	ldrb	r3, [r7, #8]
 8000852:	021b      	lsls	r3, r3, #8
 8000854:	b21a      	sxth	r2, r3
 8000856:	7a7b      	ldrb	r3, [r7, #9]
 8000858:	b21b      	sxth	r3, r3
 800085a:	4313      	orrs	r3, r2
 800085c:	b21b      	sxth	r3, r3
 800085e:	82fb      	strh	r3, [r7, #22]
  voltage = (voltage >> 4);
 8000860:	8afb      	ldrh	r3, [r7, #22]
 8000862:	091b      	lsrs	r3, r3, #4
 8000864:	82fb      	strh	r3, [r7, #22]

  float volts = voltage;
 8000866:	8afb      	ldrh	r3, [r7, #22]
 8000868:	ee07 3a90 	vmov	s15, r3
 800086c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000870:	edc7 7a04 	vstr	s15, [r7, #16]
  volts *= 1.25 / 1000;
 8000874:	6938      	ldr	r0, [r7, #16]
 8000876:	f7ff ff11 	bl	800069c <__aeabi_f2d>
 800087a:	a30b      	add	r3, pc, #44	; (adr r3, 80008a8 <MAX17043_ReadVoltage+0x90>)
 800087c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000880:	f7ff fc7e 	bl	8000180 <__aeabi_dmul>
 8000884:	4602      	mov	r2, r0
 8000886:	460b      	mov	r3, r1
 8000888:	4610      	mov	r0, r2
 800088a:	4619      	mov	r1, r3
 800088c:	f7ff ff5e 	bl	800074c <__aeabi_d2f>
 8000890:	4603      	mov	r3, r0
 8000892:	613b      	str	r3, [r7, #16]

  return volts;
 8000894:	693b      	ldr	r3, [r7, #16]
 8000896:	ee07 3a90 	vmov	s15, r3
}
 800089a:	eeb0 0a67 	vmov.f32	s0, s15
 800089e:	3718      	adds	r7, #24
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	f3af 8000 	nop.w
 80008a8:	47ae147b 	.word	0x47ae147b
 80008ac:	3f547ae1 	.word	0x3f547ae1

080008b0 <MAX17043_ReadSoC>:



float MAX17043_ReadSoC(I2C_HandleTypeDef *hi2c)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b088      	sub	sp, #32
 80008b4:	af02      	add	r7, sp, #8
 80008b6:	6078      	str	r0, [r7, #4]
	uint8_t txData[2];
	uint8_t rxData[2];

	txData[0] = 0x04; // Register address for SoC
 80008b8:	2304      	movs	r3, #4
 80008ba:	733b      	strb	r3, [r7, #12]
	txData[1] = 0x00;
 80008bc:	2300      	movs	r3, #0
 80008be:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Master_Transmit(hi2c, MAX17043_I2C_ADDR << 1, txData, 1, HAL_MAX_DELAY);
 80008c0:	f107 020c 	add.w	r2, r7, #12
 80008c4:	f04f 33ff 	mov.w	r3, #4294967295
 80008c8:	9300      	str	r3, [sp, #0]
 80008ca:	2301      	movs	r3, #1
 80008cc:	216c      	movs	r1, #108	; 0x6c
 80008ce:	6878      	ldr	r0, [r7, #4]
 80008d0:	f000 fdda 	bl	8001488 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(hi2c, MAX17043_I2C_ADDR << 1, rxData, 2, HAL_MAX_DELAY);
 80008d4:	f107 0208 	add.w	r2, r7, #8
 80008d8:	f04f 33ff 	mov.w	r3, #4294967295
 80008dc:	9300      	str	r3, [sp, #0]
 80008de:	2302      	movs	r3, #2
 80008e0:	216c      	movs	r1, #108	; 0x6c
 80008e2:	6878      	ldr	r0, [r7, #4]
 80008e4:	f000 fec4 	bl	8001670 <HAL_I2C_Master_Receive>

	uint16_t soc = (rxData[0] << 8) | rxData[1];
 80008e8:	7a3b      	ldrb	r3, [r7, #8]
 80008ea:	021b      	lsls	r3, r3, #8
 80008ec:	b21a      	sxth	r2, r3
 80008ee:	7a7b      	ldrb	r3, [r7, #9]
 80008f0:	b21b      	sxth	r3, r3
 80008f2:	4313      	orrs	r3, r2
 80008f4:	b21b      	sxth	r3, r3
 80008f6:	82fb      	strh	r3, [r7, #22]
	soc = (soc >> 8) + 0.003906f * (soc & 0x00ff);
 80008f8:	8afb      	ldrh	r3, [r7, #22]
 80008fa:	0a1b      	lsrs	r3, r3, #8
 80008fc:	b29b      	uxth	r3, r3
 80008fe:	ee07 3a90 	vmov	s15, r3
 8000902:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000906:	8afb      	ldrh	r3, [r7, #22]
 8000908:	b2db      	uxtb	r3, r3
 800090a:	ee07 3a90 	vmov	s15, r3
 800090e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000912:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8000948 <MAX17043_ReadSoC+0x98>
 8000916:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800091a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800091e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000922:	ee17 3a90 	vmov	r3, s15
 8000926:	82fb      	strh	r3, [r7, #22]
	//percent /= 256;
	float percent = soc;
 8000928:	8afb      	ldrh	r3, [r7, #22]
 800092a:	ee07 3a90 	vmov	s15, r3
 800092e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000932:	edc7 7a04 	vstr	s15, [r7, #16]

	return percent;
 8000936:	693b      	ldr	r3, [r7, #16]
 8000938:	ee07 3a90 	vmov	s15, r3
}
 800093c:	eeb0 0a67 	vmov.f32	s0, s15
 8000940:	3718      	adds	r7, #24
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	3b7ffbce 	.word	0x3b7ffbce

0800094c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800094c:	b480      	push	{r7}
 800094e:	b085      	sub	sp, #20
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000954:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000958:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800095a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	4313      	orrs	r3, r2
 8000962:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000964:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000968:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	4013      	ands	r3, r2
 800096e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000970:	68fb      	ldr	r3, [r7, #12]
}
 8000972:	bf00      	nop
 8000974:	3714      	adds	r7, #20
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
	...

08000980 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000984:	f000 fa16 	bl	8000db4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000988:	f000 f820 	bl	80009cc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800098c:	f000 f870 	bl	8000a70 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000990:	f000 f8cc 	bl	8000b2c <MX_GPIO_Init>
  MX_I2C3_Init();
 8000994:	f000 f88a 	bl	8000aac <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  MAX17043_Init(&hi2c3);
 8000998:	4809      	ldr	r0, [pc, #36]	; (80009c0 <main+0x40>)
 800099a:	f7ff ff27 	bl	80007ec <MAX17043_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  soc = MAX17043_ReadSoC(&hi2c3);
 800099e:	4808      	ldr	r0, [pc, #32]	; (80009c0 <main+0x40>)
 80009a0:	f7ff ff86 	bl	80008b0 <MAX17043_ReadSoC>
 80009a4:	eef0 7a40 	vmov.f32	s15, s0
 80009a8:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <main+0x44>)
 80009aa:	edc3 7a00 	vstr	s15, [r3]
	  volts = MAX17043_ReadVoltage(&hi2c3);
 80009ae:	4804      	ldr	r0, [pc, #16]	; (80009c0 <main+0x40>)
 80009b0:	f7ff ff32 	bl	8000818 <MAX17043_ReadVoltage>
 80009b4:	eef0 7a40 	vmov.f32	s15, s0
 80009b8:	4b03      	ldr	r3, [pc, #12]	; (80009c8 <main+0x48>)
 80009ba:	edc3 7a00 	vstr	s15, [r3]
	  soc = MAX17043_ReadSoC(&hi2c3);
 80009be:	e7ee      	b.n	800099e <main+0x1e>
 80009c0:	20000030 	.word	0x20000030
 80009c4:	20000084 	.word	0x20000084
 80009c8:	20000088 	.word	0x20000088

080009cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b09a      	sub	sp, #104	; 0x68
 80009d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009d2:	f107 0320 	add.w	r3, r7, #32
 80009d6:	2248      	movs	r2, #72	; 0x48
 80009d8:	2100      	movs	r1, #0
 80009da:	4618      	mov	r0, r3
 80009dc:	f003 f816 	bl	8003a0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009e0:	1d3b      	adds	r3, r7, #4
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	605a      	str	r2, [r3, #4]
 80009e8:	609a      	str	r2, [r3, #8]
 80009ea:	60da      	str	r2, [r3, #12]
 80009ec:	611a      	str	r2, [r3, #16]
 80009ee:	615a      	str	r2, [r3, #20]
 80009f0:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009f2:	4b1e      	ldr	r3, [pc, #120]	; (8000a6c <SystemClock_Config+0xa0>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80009fa:	4a1c      	ldr	r2, [pc, #112]	; (8000a6c <SystemClock_Config+0xa0>)
 80009fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a00:	6013      	str	r3, [r2, #0]
 8000a02:	4b1a      	ldr	r3, [pc, #104]	; (8000a6c <SystemClock_Config+0xa0>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000a0a:	603b      	str	r3, [r7, #0]
 8000a0c:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a16:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a18:	2340      	movs	r3, #64	; 0x40
 8000a1a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a20:	f107 0320 	add.w	r3, r7, #32
 8000a24:	4618      	mov	r0, r3
 8000a26:	f001 fdbf 	bl	80025a8 <HAL_RCC_OscConfig>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000a30:	f000 f883 	bl	8000b3a <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000a34:	236f      	movs	r3, #111	; 0x6f
 8000a36:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a40:	2300      	movs	r3, #0
 8000a42:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a44:	2300      	movs	r3, #0
 8000a46:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a50:	1d3b      	adds	r3, r7, #4
 8000a52:	2100      	movs	r1, #0
 8000a54:	4618      	mov	r0, r3
 8000a56:	f002 f91b 	bl	8002c90 <HAL_RCC_ClockConfig>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000a60:	f000 f86b 	bl	8000b3a <Error_Handler>
  }
}
 8000a64:	bf00      	nop
 8000a66:	3768      	adds	r7, #104	; 0x68
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	58000400 	.word	0x58000400

08000a70 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b094      	sub	sp, #80	; 0x50
 8000a74:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a76:	463b      	mov	r3, r7
 8000a78:	2250      	movs	r2, #80	; 0x50
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f002 ffc5 	bl	8003a0c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8000a82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a86:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8000a8c:	2310      	movs	r3, #16
 8000a8e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a90:	463b      	mov	r3, r7
 8000a92:	4618      	mov	r0, r3
 8000a94:	f002 fd0f 	bl	80034b6 <HAL_RCCEx_PeriphCLKConfig>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8000a9e:	f000 f84c 	bl	8000b3a <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000aa2:	bf00      	nop
 8000aa4:	3750      	adds	r7, #80	; 0x50
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
	...

08000aac <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000ab0:	4b1b      	ldr	r3, [pc, #108]	; (8000b20 <MX_I2C3_Init+0x74>)
 8000ab2:	4a1c      	ldr	r2, [pc, #112]	; (8000b24 <MX_I2C3_Init+0x78>)
 8000ab4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00303D5B;
 8000ab6:	4b1a      	ldr	r3, [pc, #104]	; (8000b20 <MX_I2C3_Init+0x74>)
 8000ab8:	4a1b      	ldr	r2, [pc, #108]	; (8000b28 <MX_I2C3_Init+0x7c>)
 8000aba:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000abc:	4b18      	ldr	r3, [pc, #96]	; (8000b20 <MX_I2C3_Init+0x74>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ac2:	4b17      	ldr	r3, [pc, #92]	; (8000b20 <MX_I2C3_Init+0x74>)
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ac8:	4b15      	ldr	r3, [pc, #84]	; (8000b20 <MX_I2C3_Init+0x74>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000ace:	4b14      	ldr	r3, [pc, #80]	; (8000b20 <MX_I2C3_Init+0x74>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ad4:	4b12      	ldr	r3, [pc, #72]	; (8000b20 <MX_I2C3_Init+0x74>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ada:	4b11      	ldr	r3, [pc, #68]	; (8000b20 <MX_I2C3_Init+0x74>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ae0:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <MX_I2C3_Init+0x74>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000ae6:	480e      	ldr	r0, [pc, #56]	; (8000b20 <MX_I2C3_Init+0x74>)
 8000ae8:	f000 fc3e 	bl	8001368 <HAL_I2C_Init>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000af2:	f000 f822 	bl	8000b3a <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000af6:	2100      	movs	r1, #0
 8000af8:	4809      	ldr	r0, [pc, #36]	; (8000b20 <MX_I2C3_Init+0x74>)
 8000afa:	f001 f941 	bl	8001d80 <HAL_I2CEx_ConfigAnalogFilter>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000b04:	f000 f819 	bl	8000b3a <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000b08:	2100      	movs	r1, #0
 8000b0a:	4805      	ldr	r0, [pc, #20]	; (8000b20 <MX_I2C3_Init+0x74>)
 8000b0c:	f001 f983 	bl	8001e16 <HAL_I2CEx_ConfigDigitalFilter>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000b16:	f000 f810 	bl	8000b3a <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	20000030 	.word	0x20000030
 8000b24:	40005c00 	.word	0x40005c00
 8000b28:	00303d5b 	.word	0x00303d5b

08000b2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b30:	2004      	movs	r0, #4
 8000b32:	f7ff ff0b 	bl	800094c <LL_AHB2_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b36:	bf00      	nop
 8000b38:	bd80      	pop	{r7, pc}

08000b3a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b3e:	b672      	cpsid	i
}
 8000b40:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b42:	e7fe      	b.n	8000b42 <Error_Handler+0x8>

08000b44 <LL_AHB2_GRP1_EnableClock>:
{
 8000b44:	b480      	push	{r7}
 8000b46:	b085      	sub	sp, #20
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000b4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b50:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000b5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b60:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4013      	ands	r3, r2
 8000b66:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b68:	68fb      	ldr	r3, [r7, #12]
}
 8000b6a:	bf00      	nop
 8000b6c:	3714      	adds	r7, #20
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr

08000b76 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000b76:	b480      	push	{r7}
 8000b78:	b085      	sub	sp, #20
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000b7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b82:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000b84:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	4313      	orrs	r3, r2
 8000b8c:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000b8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b92:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	4013      	ands	r3, r2
 8000b98:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b9a:	68fb      	ldr	r3, [r7, #12]
}
 8000b9c:	bf00      	nop
 8000b9e:	3714      	adds	r7, #20
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr

08000ba8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
	...

08000bb8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b09c      	sub	sp, #112	; 0x70
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	609a      	str	r2, [r3, #8]
 8000bcc:	60da      	str	r2, [r3, #12]
 8000bce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bd0:	f107 030c 	add.w	r3, r7, #12
 8000bd4:	2250      	movs	r2, #80	; 0x50
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f002 ff17 	bl	8003a0c <memset>
  if(hi2c->Instance==I2C3)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4a16      	ldr	r2, [pc, #88]	; (8000c3c <HAL_I2C_MspInit+0x84>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d124      	bne.n	8000c32 <HAL_I2C_MspInit+0x7a>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000be8:	2308      	movs	r3, #8
 8000bea:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_HSI;
 8000bec:	4b14      	ldr	r3, [pc, #80]	; (8000c40 <HAL_I2C_MspInit+0x88>)
 8000bee:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bf0:	f107 030c 	add.w	r3, r7, #12
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f002 fc5e 	bl	80034b6 <HAL_RCCEx_PeriphCLKConfig>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000c00:	f7ff ff9b 	bl	8000b3a <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c04:	2004      	movs	r0, #4
 8000c06:	f7ff ff9d 	bl	8000b44 <LL_AHB2_GRP1_EnableClock>
    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c0a:	2303      	movs	r3, #3
 8000c0c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c0e:	2312      	movs	r3, #18
 8000c10:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c12:	2301      	movs	r3, #1
 8000c14:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c16:	2302      	movs	r3, #2
 8000c18:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000c1a:	2304      	movs	r3, #4
 8000c1c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c1e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000c22:	4619      	mov	r1, r3
 8000c24:	4807      	ldr	r0, [pc, #28]	; (8000c44 <HAL_I2C_MspInit+0x8c>)
 8000c26:	f000 fa2f 	bl	8001088 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000c2a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000c2e:	f7ff ffa2 	bl	8000b76 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000c32:	bf00      	nop
 8000c34:	3770      	adds	r7, #112	; 0x70
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40005c00 	.word	0x40005c00
 8000c40:	00302000 	.word	0x00302000
 8000c44:	48000800 	.word	0x48000800

08000c48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c4c:	e7fe      	b.n	8000c4c <NMI_Handler+0x4>

08000c4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c52:	e7fe      	b.n	8000c52 <HardFault_Handler+0x4>

08000c54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c58:	e7fe      	b.n	8000c58 <MemManage_Handler+0x4>

08000c5a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c5e:	e7fe      	b.n	8000c5e <BusFault_Handler+0x4>

08000c60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c64:	e7fe      	b.n	8000c64 <UsageFault_Handler+0x4>

08000c66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr

08000c74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr

08000c82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr

08000c90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c94:	f000 f8e8 	bl	8000e68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c98:	bf00      	nop
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000ca0:	4b24      	ldr	r3, [pc, #144]	; (8000d34 <SystemInit+0x98>)
 8000ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ca6:	4a23      	ldr	r2, [pc, #140]	; (8000d34 <SystemInit+0x98>)
 8000ca8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000cb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000cba:	f043 0301 	orr.w	r3, r3, #1
 8000cbe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000cc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cc4:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000cc8:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000cca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000cd4:	4b18      	ldr	r3, [pc, #96]	; (8000d38 <SystemInit+0x9c>)
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000cda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000ce2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ce6:	f023 0305 	bic.w	r3, r3, #5
 8000cea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000cee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cf2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000cf6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000cfa:	f023 0301 	bic.w	r3, r3, #1
 8000cfe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000d02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d06:	4a0d      	ldr	r2, [pc, #52]	; (8000d3c <SystemInit+0xa0>)
 8000d08:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000d0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d0e:	4a0b      	ldr	r2, [pc, #44]	; (8000d3c <SystemInit+0xa0>)
 8000d10:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d20:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000d22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d26:	2200      	movs	r2, #0
 8000d28:	619a      	str	r2, [r3, #24]
}
 8000d2a:	bf00      	nop
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	e000ed00 	.word	0xe000ed00
 8000d38:	faf6fefb 	.word	0xfaf6fefb
 8000d3c:	22041000 	.word	0x22041000

08000d40 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000d40:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d42:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d44:	3304      	adds	r3, #4

08000d46 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d46:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d48:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000d4a:	d3f9      	bcc.n	8000d40 <CopyDataInit>
  bx lr
 8000d4c:	4770      	bx	lr

08000d4e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000d4e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000d50:	3004      	adds	r0, #4

08000d52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000d52:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000d54:	d3fb      	bcc.n	8000d4e <FillZerobss>
  bx lr
 8000d56:	4770      	bx	lr

08000d58 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d58:	480c      	ldr	r0, [pc, #48]	; (8000d8c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d5a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d5c:	f7ff ff9e 	bl	8000c9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000d60:	480b      	ldr	r0, [pc, #44]	; (8000d90 <LoopForever+0x6>)
 8000d62:	490c      	ldr	r1, [pc, #48]	; (8000d94 <LoopForever+0xa>)
 8000d64:	4a0c      	ldr	r2, [pc, #48]	; (8000d98 <LoopForever+0xe>)
 8000d66:	2300      	movs	r3, #0
 8000d68:	f7ff ffed 	bl	8000d46 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000d6c:	480b      	ldr	r0, [pc, #44]	; (8000d9c <LoopForever+0x12>)
 8000d6e:	490c      	ldr	r1, [pc, #48]	; (8000da0 <LoopForever+0x16>)
 8000d70:	4a0c      	ldr	r2, [pc, #48]	; (8000da4 <LoopForever+0x1a>)
 8000d72:	2300      	movs	r3, #0
 8000d74:	f7ff ffe7 	bl	8000d46 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000d78:	480b      	ldr	r0, [pc, #44]	; (8000da8 <LoopForever+0x1e>)
 8000d7a:	490c      	ldr	r1, [pc, #48]	; (8000dac <LoopForever+0x22>)
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	f7ff ffe8 	bl	8000d52 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d82:	f002 fe1f 	bl	80039c4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000d86:	f7ff fdfb 	bl	8000980 <main>

08000d8a <LoopForever>:

LoopForever:
  b LoopForever
 8000d8a:	e7fe      	b.n	8000d8a <LoopForever>
  ldr   r0, =_estack
 8000d8c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000d90:	20000008 	.word	0x20000008
 8000d94:	20000014 	.word	0x20000014
 8000d98:	08003ae8 	.word	0x08003ae8
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000d9c:	20030000 	.word	0x20030000
 8000da0:	20030000 	.word	0x20030000
 8000da4:	08003af4 	.word	0x08003af4
  INIT_BSS _sbss, _ebss
 8000da8:	20000014 	.word	0x20000014
 8000dac:	20000090 	.word	0x20000090

08000db0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000db0:	e7fe      	b.n	8000db0 <ADC1_IRQHandler>
	...

08000db4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dbe:	4b0c      	ldr	r3, [pc, #48]	; (8000df0 <HAL_Init+0x3c>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4a0b      	ldr	r2, [pc, #44]	; (8000df0 <HAL_Init+0x3c>)
 8000dc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dc8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dca:	2003      	movs	r0, #3
 8000dcc:	f000 f92a 	bl	8001024 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dd0:	200f      	movs	r0, #15
 8000dd2:	f000 f80f 	bl	8000df4 <HAL_InitTick>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d002      	beq.n	8000de2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	71fb      	strb	r3, [r7, #7]
 8000de0:	e001      	b.n	8000de6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000de2:	f7ff fee1 	bl	8000ba8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000de6:	79fb      	ldrb	r3, [r7, #7]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3708      	adds	r7, #8
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	58004000 	.word	0x58004000

08000df4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8000e00:	4b17      	ldr	r3, [pc, #92]	; (8000e60 <HAL_InitTick+0x6c>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d024      	beq.n	8000e52 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e08:	f002 f8f0 	bl	8002fec <HAL_RCC_GetHCLKFreq>
 8000e0c:	4602      	mov	r2, r0
 8000e0e:	4b14      	ldr	r3, [pc, #80]	; (8000e60 <HAL_InitTick+0x6c>)
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	4619      	mov	r1, r3
 8000e14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e18:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e20:	4618      	mov	r0, r3
 8000e22:	f000 f924 	bl	800106e <HAL_SYSTICK_Config>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d10f      	bne.n	8000e4c <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2b0f      	cmp	r3, #15
 8000e30:	d809      	bhi.n	8000e46 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e32:	2200      	movs	r2, #0
 8000e34:	6879      	ldr	r1, [r7, #4]
 8000e36:	f04f 30ff 	mov.w	r0, #4294967295
 8000e3a:	f000 f8fe 	bl	800103a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e3e:	4a09      	ldr	r2, [pc, #36]	; (8000e64 <HAL_InitTick+0x70>)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	6013      	str	r3, [r2, #0]
 8000e44:	e007      	b.n	8000e56 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
 8000e48:	73fb      	strb	r3, [r7, #15]
 8000e4a:	e004      	b.n	8000e56 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	73fb      	strb	r3, [r7, #15]
 8000e50:	e001      	b.n	8000e56 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e52:	2301      	movs	r3, #1
 8000e54:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	3710      	adds	r7, #16
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	20000010 	.word	0x20000010
 8000e64:	2000000c 	.word	0x2000000c

08000e68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e6c:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <HAL_IncTick+0x20>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	461a      	mov	r2, r3
 8000e72:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <HAL_IncTick+0x24>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4413      	add	r3, r2
 8000e78:	4a04      	ldr	r2, [pc, #16]	; (8000e8c <HAL_IncTick+0x24>)
 8000e7a:	6013      	str	r3, [r2, #0]
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	20000010 	.word	0x20000010
 8000e8c:	2000008c 	.word	0x2000008c

08000e90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  return uwTick;
 8000e94:	4b03      	ldr	r3, [pc, #12]	; (8000ea4 <HAL_GetTick+0x14>)
 8000e96:	681b      	ldr	r3, [r3, #0]
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	2000008c 	.word	0x2000008c

08000ea8 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000eac:	4b03      	ldr	r3, [pc, #12]	; (8000ebc <HAL_GetTickPrio+0x14>)
 8000eae:	681b      	ldr	r3, [r3, #0]
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	2000000c 	.word	0x2000000c

08000ec0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b085      	sub	sp, #20
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	f003 0307 	and.w	r3, r3, #7
 8000ece:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ed0:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ed6:	68ba      	ldr	r2, [r7, #8]
 8000ed8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000edc:	4013      	ands	r3, r2
 8000ede:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ee8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000eec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ef0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ef2:	4a04      	ldr	r2, [pc, #16]	; (8000f04 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	60d3      	str	r3, [r2, #12]
}
 8000ef8:	bf00      	nop
 8000efa:	3714      	adds	r7, #20
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr
 8000f04:	e000ed00 	.word	0xe000ed00

08000f08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f0c:	4b04      	ldr	r3, [pc, #16]	; (8000f20 <__NVIC_GetPriorityGrouping+0x18>)
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	0a1b      	lsrs	r3, r3, #8
 8000f12:	f003 0307 	and.w	r3, r3, #7
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	6039      	str	r1, [r7, #0]
 8000f2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	db0a      	blt.n	8000f4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	b2da      	uxtb	r2, r3
 8000f3c:	490c      	ldr	r1, [pc, #48]	; (8000f70 <__NVIC_SetPriority+0x4c>)
 8000f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f42:	0112      	lsls	r2, r2, #4
 8000f44:	b2d2      	uxtb	r2, r2
 8000f46:	440b      	add	r3, r1
 8000f48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f4c:	e00a      	b.n	8000f64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	b2da      	uxtb	r2, r3
 8000f52:	4908      	ldr	r1, [pc, #32]	; (8000f74 <__NVIC_SetPriority+0x50>)
 8000f54:	79fb      	ldrb	r3, [r7, #7]
 8000f56:	f003 030f 	and.w	r3, r3, #15
 8000f5a:	3b04      	subs	r3, #4
 8000f5c:	0112      	lsls	r2, r2, #4
 8000f5e:	b2d2      	uxtb	r2, r2
 8000f60:	440b      	add	r3, r1
 8000f62:	761a      	strb	r2, [r3, #24]
}
 8000f64:	bf00      	nop
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	e000e100 	.word	0xe000e100
 8000f74:	e000ed00 	.word	0xe000ed00

08000f78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b089      	sub	sp, #36	; 0x24
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	60b9      	str	r1, [r7, #8]
 8000f82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	f003 0307 	and.w	r3, r3, #7
 8000f8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	f1c3 0307 	rsb	r3, r3, #7
 8000f92:	2b04      	cmp	r3, #4
 8000f94:	bf28      	it	cs
 8000f96:	2304      	movcs	r3, #4
 8000f98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	3304      	adds	r3, #4
 8000f9e:	2b06      	cmp	r3, #6
 8000fa0:	d902      	bls.n	8000fa8 <NVIC_EncodePriority+0x30>
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	3b03      	subs	r3, #3
 8000fa6:	e000      	b.n	8000faa <NVIC_EncodePriority+0x32>
 8000fa8:	2300      	movs	r3, #0
 8000faa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fac:	f04f 32ff 	mov.w	r2, #4294967295
 8000fb0:	69bb      	ldr	r3, [r7, #24]
 8000fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb6:	43da      	mvns	r2, r3
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	401a      	ands	r2, r3
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fc0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fca:	43d9      	mvns	r1, r3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd0:	4313      	orrs	r3, r2
         );
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3724      	adds	r7, #36	; 0x24
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
	...

08000fe0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	3b01      	subs	r3, #1
 8000fec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ff0:	d301      	bcc.n	8000ff6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e00f      	b.n	8001016 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ff6:	4a0a      	ldr	r2, [pc, #40]	; (8001020 <SysTick_Config+0x40>)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	3b01      	subs	r3, #1
 8000ffc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ffe:	210f      	movs	r1, #15
 8001000:	f04f 30ff 	mov.w	r0, #4294967295
 8001004:	f7ff ff8e 	bl	8000f24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001008:	4b05      	ldr	r3, [pc, #20]	; (8001020 <SysTick_Config+0x40>)
 800100a:	2200      	movs	r2, #0
 800100c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800100e:	4b04      	ldr	r3, [pc, #16]	; (8001020 <SysTick_Config+0x40>)
 8001010:	2207      	movs	r2, #7
 8001012:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001014:	2300      	movs	r3, #0
}
 8001016:	4618      	mov	r0, r3
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	e000e010 	.word	0xe000e010

08001024 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f7ff ff47 	bl	8000ec0 <__NVIC_SetPriorityGrouping>
}
 8001032:	bf00      	nop
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	b086      	sub	sp, #24
 800103e:	af00      	add	r7, sp, #0
 8001040:	4603      	mov	r3, r0
 8001042:	60b9      	str	r1, [r7, #8]
 8001044:	607a      	str	r2, [r7, #4]
 8001046:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001048:	f7ff ff5e 	bl	8000f08 <__NVIC_GetPriorityGrouping>
 800104c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800104e:	687a      	ldr	r2, [r7, #4]
 8001050:	68b9      	ldr	r1, [r7, #8]
 8001052:	6978      	ldr	r0, [r7, #20]
 8001054:	f7ff ff90 	bl	8000f78 <NVIC_EncodePriority>
 8001058:	4602      	mov	r2, r0
 800105a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800105e:	4611      	mov	r1, r2
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff ff5f 	bl	8000f24 <__NVIC_SetPriority>
}
 8001066:	bf00      	nop
 8001068:	3718      	adds	r7, #24
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800106e:	b580      	push	{r7, lr}
 8001070:	b082      	sub	sp, #8
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f7ff ffb2 	bl	8000fe0 <SysTick_Config>
 800107c:	4603      	mov	r3, r0
}
 800107e:	4618      	mov	r0, r3
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
	...

08001088 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001088:	b480      	push	{r7}
 800108a:	b087      	sub	sp, #28
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001092:	2300      	movs	r3, #0
 8001094:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001096:	e14c      	b.n	8001332 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	2101      	movs	r1, #1
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	fa01 f303 	lsl.w	r3, r1, r3
 80010a4:	4013      	ands	r3, r2
 80010a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	f000 813e 	beq.w	800132c <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f003 0303 	and.w	r3, r3, #3
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d005      	beq.n	80010c8 <HAL_GPIO_Init+0x40>
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f003 0303 	and.w	r3, r3, #3
 80010c4:	2b02      	cmp	r3, #2
 80010c6:	d130      	bne.n	800112a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	2203      	movs	r2, #3
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	43db      	mvns	r3, r3
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	4013      	ands	r3, r2
 80010de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	68da      	ldr	r2, [r3, #12]
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	693a      	ldr	r2, [r7, #16]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	693a      	ldr	r2, [r7, #16]
 80010f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010fe:	2201      	movs	r2, #1
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	43db      	mvns	r3, r3
 8001108:	693a      	ldr	r2, [r7, #16]
 800110a:	4013      	ands	r3, r2
 800110c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	091b      	lsrs	r3, r3, #4
 8001114:	f003 0201 	and.w	r2, r3, #1
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	4313      	orrs	r3, r2
 8001122:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f003 0303 	and.w	r3, r3, #3
 8001132:	2b03      	cmp	r3, #3
 8001134:	d017      	beq.n	8001166 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	68db      	ldr	r3, [r3, #12]
 800113a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	2203      	movs	r2, #3
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	43db      	mvns	r3, r3
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	4013      	ands	r3, r2
 800114c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	689a      	ldr	r2, [r3, #8]
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	4313      	orrs	r3, r2
 800115e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f003 0303 	and.w	r3, r3, #3
 800116e:	2b02      	cmp	r3, #2
 8001170:	d123      	bne.n	80011ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	08da      	lsrs	r2, r3, #3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	3208      	adds	r2, #8
 800117a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800117e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	f003 0307 	and.w	r3, r3, #7
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	220f      	movs	r2, #15
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	43db      	mvns	r3, r3
 8001190:	693a      	ldr	r2, [r7, #16]
 8001192:	4013      	ands	r3, r2
 8001194:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	691a      	ldr	r2, [r3, #16]
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	f003 0307 	and.w	r3, r3, #7
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	08da      	lsrs	r2, r3, #3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	3208      	adds	r2, #8
 80011b4:	6939      	ldr	r1, [r7, #16]
 80011b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	2203      	movs	r2, #3
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	43db      	mvns	r3, r3
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	4013      	ands	r3, r2
 80011d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f003 0203 	and.w	r2, r3, #3
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	f000 8098 	beq.w	800132c <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80011fc:	4a54      	ldr	r2, [pc, #336]	; (8001350 <HAL_GPIO_Init+0x2c8>)
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	089b      	lsrs	r3, r3, #2
 8001202:	3302      	adds	r3, #2
 8001204:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001208:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	f003 0303 	and.w	r3, r3, #3
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	220f      	movs	r2, #15
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	43db      	mvns	r3, r3
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	4013      	ands	r3, r2
 800121e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001226:	d019      	beq.n	800125c <HAL_GPIO_Init+0x1d4>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	4a4a      	ldr	r2, [pc, #296]	; (8001354 <HAL_GPIO_Init+0x2cc>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d013      	beq.n	8001258 <HAL_GPIO_Init+0x1d0>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	4a49      	ldr	r2, [pc, #292]	; (8001358 <HAL_GPIO_Init+0x2d0>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d00d      	beq.n	8001254 <HAL_GPIO_Init+0x1cc>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	4a48      	ldr	r2, [pc, #288]	; (800135c <HAL_GPIO_Init+0x2d4>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d007      	beq.n	8001250 <HAL_GPIO_Init+0x1c8>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	4a47      	ldr	r2, [pc, #284]	; (8001360 <HAL_GPIO_Init+0x2d8>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d101      	bne.n	800124c <HAL_GPIO_Init+0x1c4>
 8001248:	2304      	movs	r3, #4
 800124a:	e008      	b.n	800125e <HAL_GPIO_Init+0x1d6>
 800124c:	2307      	movs	r3, #7
 800124e:	e006      	b.n	800125e <HAL_GPIO_Init+0x1d6>
 8001250:	2303      	movs	r3, #3
 8001252:	e004      	b.n	800125e <HAL_GPIO_Init+0x1d6>
 8001254:	2302      	movs	r3, #2
 8001256:	e002      	b.n	800125e <HAL_GPIO_Init+0x1d6>
 8001258:	2301      	movs	r3, #1
 800125a:	e000      	b.n	800125e <HAL_GPIO_Init+0x1d6>
 800125c:	2300      	movs	r3, #0
 800125e:	697a      	ldr	r2, [r7, #20]
 8001260:	f002 0203 	and.w	r2, r2, #3
 8001264:	0092      	lsls	r2, r2, #2
 8001266:	4093      	lsls	r3, r2
 8001268:	693a      	ldr	r2, [r7, #16]
 800126a:	4313      	orrs	r3, r2
 800126c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800126e:	4938      	ldr	r1, [pc, #224]	; (8001350 <HAL_GPIO_Init+0x2c8>)
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	089b      	lsrs	r3, r3, #2
 8001274:	3302      	adds	r3, #2
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800127c:	4b39      	ldr	r3, [pc, #228]	; (8001364 <HAL_GPIO_Init+0x2dc>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	43db      	mvns	r3, r3
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	4013      	ands	r3, r2
 800128a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001294:	2b00      	cmp	r3, #0
 8001296:	d003      	beq.n	80012a0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001298:	693a      	ldr	r2, [r7, #16]
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	4313      	orrs	r3, r2
 800129e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012a0:	4a30      	ldr	r2, [pc, #192]	; (8001364 <HAL_GPIO_Init+0x2dc>)
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80012a6:	4b2f      	ldr	r3, [pc, #188]	; (8001364 <HAL_GPIO_Init+0x2dc>)
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	43db      	mvns	r3, r3
 80012b0:	693a      	ldr	r2, [r7, #16]
 80012b2:	4013      	ands	r3, r2
 80012b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d003      	beq.n	80012ca <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012ca:	4a26      	ldr	r2, [pc, #152]	; (8001364 <HAL_GPIO_Init+0x2dc>)
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80012d0:	4b24      	ldr	r3, [pc, #144]	; (8001364 <HAL_GPIO_Init+0x2dc>)
 80012d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80012d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	43db      	mvns	r3, r3
 80012dc:	693a      	ldr	r2, [r7, #16]
 80012de:	4013      	ands	r3, r2
 80012e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d003      	beq.n	80012f6 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012f6:	4a1b      	ldr	r2, [pc, #108]	; (8001364 <HAL_GPIO_Init+0x2dc>)
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80012fe:	4b19      	ldr	r3, [pc, #100]	; (8001364 <HAL_GPIO_Init+0x2dc>)
 8001300:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001304:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	43db      	mvns	r3, r3
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	4013      	ands	r3, r2
 800130e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001318:	2b00      	cmp	r3, #0
 800131a:	d003      	beq.n	8001324 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800131c:	693a      	ldr	r2, [r7, #16]
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	4313      	orrs	r3, r2
 8001322:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001324:	4a0f      	ldr	r2, [pc, #60]	; (8001364 <HAL_GPIO_Init+0x2dc>)
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	3301      	adds	r3, #1
 8001330:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	fa22 f303 	lsr.w	r3, r2, r3
 800133c:	2b00      	cmp	r3, #0
 800133e:	f47f aeab 	bne.w	8001098 <HAL_GPIO_Init+0x10>
  }
}
 8001342:	bf00      	nop
 8001344:	bf00      	nop
 8001346:	371c      	adds	r7, #28
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	40010000 	.word	0x40010000
 8001354:	48000400 	.word	0x48000400
 8001358:	48000800 	.word	0x48000800
 800135c:	48000c00 	.word	0x48000c00
 8001360:	48001000 	.word	0x48001000
 8001364:	58000800 	.word	0x58000800

08001368 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d101      	bne.n	800137a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e081      	b.n	800147e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001380:	b2db      	uxtb	r3, r3
 8001382:	2b00      	cmp	r3, #0
 8001384:	d106      	bne.n	8001394 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2200      	movs	r2, #0
 800138a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f7ff fc12 	bl	8000bb8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2224      	movs	r2, #36	; 0x24
 8001398:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f022 0201 	bic.w	r2, r2, #1
 80013aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	685a      	ldr	r2, [r3, #4]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80013b8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	689a      	ldr	r2, [r3, #8]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80013c8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	68db      	ldr	r3, [r3, #12]
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d107      	bne.n	80013e2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	689a      	ldr	r2, [r3, #8]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	e006      	b.n	80013f0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	689a      	ldr	r2, [r3, #8]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80013ee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d104      	bne.n	8001402 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001400:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	6812      	ldr	r2, [r2, #0]
 800140c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001410:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001414:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	68da      	ldr	r2, [r3, #12]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001424:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	691a      	ldr	r2, [r3, #16]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	695b      	ldr	r3, [r3, #20]
 800142e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	699b      	ldr	r3, [r3, #24]
 8001436:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	430a      	orrs	r2, r1
 800143e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	69d9      	ldr	r1, [r3, #28]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6a1a      	ldr	r2, [r3, #32]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	430a      	orrs	r2, r1
 800144e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f042 0201 	orr.w	r2, r2, #1
 800145e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2200      	movs	r2, #0
 8001464:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2220      	movs	r2, #32
 800146a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2200      	movs	r2, #0
 8001472:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2200      	movs	r2, #0
 8001478:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800147c:	2300      	movs	r3, #0
}
 800147e:	4618      	mov	r0, r3
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
	...

08001488 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b088      	sub	sp, #32
 800148c:	af02      	add	r7, sp, #8
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	607a      	str	r2, [r7, #4]
 8001492:	461a      	mov	r2, r3
 8001494:	460b      	mov	r3, r1
 8001496:	817b      	strh	r3, [r7, #10]
 8001498:	4613      	mov	r3, r2
 800149a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	2b20      	cmp	r3, #32
 80014a6:	f040 80da 	bne.w	800165e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d101      	bne.n	80014b8 <HAL_I2C_Master_Transmit+0x30>
 80014b4:	2302      	movs	r3, #2
 80014b6:	e0d3      	b.n	8001660 <HAL_I2C_Master_Transmit+0x1d8>
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	2201      	movs	r2, #1
 80014bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80014c0:	f7ff fce6 	bl	8000e90 <HAL_GetTick>
 80014c4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	9300      	str	r3, [sp, #0]
 80014ca:	2319      	movs	r3, #25
 80014cc:	2201      	movs	r2, #1
 80014ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014d2:	68f8      	ldr	r0, [r7, #12]
 80014d4:	f000 f9e6 	bl	80018a4 <I2C_WaitOnFlagUntilTimeout>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e0be      	b.n	8001660 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	2221      	movs	r2, #33	; 0x21
 80014e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	2210      	movs	r2, #16
 80014ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	2200      	movs	r2, #0
 80014f6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	893a      	ldrh	r2, [r7, #8]
 8001502:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	2200      	movs	r2, #0
 8001508:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800150e:	b29b      	uxth	r3, r3
 8001510:	2bff      	cmp	r3, #255	; 0xff
 8001512:	d90e      	bls.n	8001532 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	22ff      	movs	r2, #255	; 0xff
 8001518:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800151e:	b2da      	uxtb	r2, r3
 8001520:	8979      	ldrh	r1, [r7, #10]
 8001522:	4b51      	ldr	r3, [pc, #324]	; (8001668 <HAL_I2C_Master_Transmit+0x1e0>)
 8001524:	9300      	str	r3, [sp, #0]
 8001526:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800152a:	68f8      	ldr	r0, [r7, #12]
 800152c:	f000 fbf6 	bl	8001d1c <I2C_TransferConfig>
 8001530:	e06c      	b.n	800160c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001536:	b29a      	uxth	r2, r3
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001540:	b2da      	uxtb	r2, r3
 8001542:	8979      	ldrh	r1, [r7, #10]
 8001544:	4b48      	ldr	r3, [pc, #288]	; (8001668 <HAL_I2C_Master_Transmit+0x1e0>)
 8001546:	9300      	str	r3, [sp, #0]
 8001548:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800154c:	68f8      	ldr	r0, [r7, #12]
 800154e:	f000 fbe5 	bl	8001d1c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001552:	e05b      	b.n	800160c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001554:	697a      	ldr	r2, [r7, #20]
 8001556:	6a39      	ldr	r1, [r7, #32]
 8001558:	68f8      	ldr	r0, [r7, #12]
 800155a:	f000 f9f2 	bl	8001942 <I2C_WaitOnTXISFlagUntilTimeout>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	e07b      	b.n	8001660 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800156c:	781a      	ldrb	r2, [r3, #0]
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001578:	1c5a      	adds	r2, r3, #1
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001582:	b29b      	uxth	r3, r3
 8001584:	3b01      	subs	r3, #1
 8001586:	b29a      	uxth	r2, r3
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001590:	3b01      	subs	r3, #1
 8001592:	b29a      	uxth	r2, r3
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800159c:	b29b      	uxth	r3, r3
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d034      	beq.n	800160c <HAL_I2C_Master_Transmit+0x184>
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d130      	bne.n	800160c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	9300      	str	r3, [sp, #0]
 80015ae:	6a3b      	ldr	r3, [r7, #32]
 80015b0:	2200      	movs	r2, #0
 80015b2:	2180      	movs	r1, #128	; 0x80
 80015b4:	68f8      	ldr	r0, [r7, #12]
 80015b6:	f000 f975 	bl	80018a4 <I2C_WaitOnFlagUntilTimeout>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e04d      	b.n	8001660 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015c8:	b29b      	uxth	r3, r3
 80015ca:	2bff      	cmp	r3, #255	; 0xff
 80015cc:	d90e      	bls.n	80015ec <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	22ff      	movs	r2, #255	; 0xff
 80015d2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015d8:	b2da      	uxtb	r2, r3
 80015da:	8979      	ldrh	r1, [r7, #10]
 80015dc:	2300      	movs	r3, #0
 80015de:	9300      	str	r3, [sp, #0]
 80015e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80015e4:	68f8      	ldr	r0, [r7, #12]
 80015e6:	f000 fb99 	bl	8001d1c <I2C_TransferConfig>
 80015ea:	e00f      	b.n	800160c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015f0:	b29a      	uxth	r2, r3
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015fa:	b2da      	uxtb	r2, r3
 80015fc:	8979      	ldrh	r1, [r7, #10]
 80015fe:	2300      	movs	r3, #0
 8001600:	9300      	str	r3, [sp, #0]
 8001602:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001606:	68f8      	ldr	r0, [r7, #12]
 8001608:	f000 fb88 	bl	8001d1c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001610:	b29b      	uxth	r3, r3
 8001612:	2b00      	cmp	r3, #0
 8001614:	d19e      	bne.n	8001554 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001616:	697a      	ldr	r2, [r7, #20]
 8001618:	6a39      	ldr	r1, [r7, #32]
 800161a:	68f8      	ldr	r0, [r7, #12]
 800161c:	f000 f9d8 	bl	80019d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e01a      	b.n	8001660 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	2220      	movs	r2, #32
 8001630:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	6859      	ldr	r1, [r3, #4]
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	4b0b      	ldr	r3, [pc, #44]	; (800166c <HAL_I2C_Master_Transmit+0x1e4>)
 800163e:	400b      	ands	r3, r1
 8001640:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	2220      	movs	r2, #32
 8001646:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	2200      	movs	r2, #0
 800164e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	2200      	movs	r2, #0
 8001656:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800165a:	2300      	movs	r3, #0
 800165c:	e000      	b.n	8001660 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800165e:	2302      	movs	r3, #2
  }
}
 8001660:	4618      	mov	r0, r3
 8001662:	3718      	adds	r7, #24
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	80002000 	.word	0x80002000
 800166c:	fe00e800 	.word	0xfe00e800

08001670 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b088      	sub	sp, #32
 8001674:	af02      	add	r7, sp, #8
 8001676:	60f8      	str	r0, [r7, #12]
 8001678:	607a      	str	r2, [r7, #4]
 800167a:	461a      	mov	r2, r3
 800167c:	460b      	mov	r3, r1
 800167e:	817b      	strh	r3, [r7, #10]
 8001680:	4613      	mov	r3, r2
 8001682:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800168a:	b2db      	uxtb	r3, r3
 800168c:	2b20      	cmp	r3, #32
 800168e:	f040 80db 	bne.w	8001848 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001698:	2b01      	cmp	r3, #1
 800169a:	d101      	bne.n	80016a0 <HAL_I2C_Master_Receive+0x30>
 800169c:	2302      	movs	r3, #2
 800169e:	e0d4      	b.n	800184a <HAL_I2C_Master_Receive+0x1da>
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	2201      	movs	r2, #1
 80016a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80016a8:	f7ff fbf2 	bl	8000e90 <HAL_GetTick>
 80016ac:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	9300      	str	r3, [sp, #0]
 80016b2:	2319      	movs	r3, #25
 80016b4:	2201      	movs	r2, #1
 80016b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016ba:	68f8      	ldr	r0, [r7, #12]
 80016bc:	f000 f8f2 	bl	80018a4 <I2C_WaitOnFlagUntilTimeout>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e0bf      	b.n	800184a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	2222      	movs	r2, #34	; 0x22
 80016ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	2210      	movs	r2, #16
 80016d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	2200      	movs	r2, #0
 80016de:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	893a      	ldrh	r2, [r7, #8]
 80016ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	2200      	movs	r2, #0
 80016f0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	2bff      	cmp	r3, #255	; 0xff
 80016fa:	d90e      	bls.n	800171a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	22ff      	movs	r2, #255	; 0xff
 8001700:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001706:	b2da      	uxtb	r2, r3
 8001708:	8979      	ldrh	r1, [r7, #10]
 800170a:	4b52      	ldr	r3, [pc, #328]	; (8001854 <HAL_I2C_Master_Receive+0x1e4>)
 800170c:	9300      	str	r3, [sp, #0]
 800170e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001712:	68f8      	ldr	r0, [r7, #12]
 8001714:	f000 fb02 	bl	8001d1c <I2C_TransferConfig>
 8001718:	e06d      	b.n	80017f6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800171e:	b29a      	uxth	r2, r3
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001728:	b2da      	uxtb	r2, r3
 800172a:	8979      	ldrh	r1, [r7, #10]
 800172c:	4b49      	ldr	r3, [pc, #292]	; (8001854 <HAL_I2C_Master_Receive+0x1e4>)
 800172e:	9300      	str	r3, [sp, #0]
 8001730:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001734:	68f8      	ldr	r0, [r7, #12]
 8001736:	f000 faf1 	bl	8001d1c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800173a:	e05c      	b.n	80017f6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800173c:	697a      	ldr	r2, [r7, #20]
 800173e:	6a39      	ldr	r1, [r7, #32]
 8001740:	68f8      	ldr	r0, [r7, #12]
 8001742:	f000 f989 	bl	8001a58 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e07c      	b.n	800184a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175a:	b2d2      	uxtb	r2, r2
 800175c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001762:	1c5a      	adds	r2, r3, #1
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800176c:	3b01      	subs	r3, #1
 800176e:	b29a      	uxth	r2, r3
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001778:	b29b      	uxth	r3, r3
 800177a:	3b01      	subs	r3, #1
 800177c:	b29a      	uxth	r2, r3
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001786:	b29b      	uxth	r3, r3
 8001788:	2b00      	cmp	r3, #0
 800178a:	d034      	beq.n	80017f6 <HAL_I2C_Master_Receive+0x186>
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001790:	2b00      	cmp	r3, #0
 8001792:	d130      	bne.n	80017f6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	9300      	str	r3, [sp, #0]
 8001798:	6a3b      	ldr	r3, [r7, #32]
 800179a:	2200      	movs	r2, #0
 800179c:	2180      	movs	r1, #128	; 0x80
 800179e:	68f8      	ldr	r0, [r7, #12]
 80017a0:	f000 f880 	bl	80018a4 <I2C_WaitOnFlagUntilTimeout>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e04d      	b.n	800184a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	2bff      	cmp	r3, #255	; 0xff
 80017b6:	d90e      	bls.n	80017d6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	22ff      	movs	r2, #255	; 0xff
 80017bc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017c2:	b2da      	uxtb	r2, r3
 80017c4:	8979      	ldrh	r1, [r7, #10]
 80017c6:	2300      	movs	r3, #0
 80017c8:	9300      	str	r3, [sp, #0]
 80017ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017ce:	68f8      	ldr	r0, [r7, #12]
 80017d0:	f000 faa4 	bl	8001d1c <I2C_TransferConfig>
 80017d4:	e00f      	b.n	80017f6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017da:	b29a      	uxth	r2, r3
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017e4:	b2da      	uxtb	r2, r3
 80017e6:	8979      	ldrh	r1, [r7, #10]
 80017e8:	2300      	movs	r3, #0
 80017ea:	9300      	str	r3, [sp, #0]
 80017ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017f0:	68f8      	ldr	r0, [r7, #12]
 80017f2:	f000 fa93 	bl	8001d1c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d19d      	bne.n	800173c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001800:	697a      	ldr	r2, [r7, #20]
 8001802:	6a39      	ldr	r1, [r7, #32]
 8001804:	68f8      	ldr	r0, [r7, #12]
 8001806:	f000 f8e3 	bl	80019d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e01a      	b.n	800184a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2220      	movs	r2, #32
 800181a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	6859      	ldr	r1, [r3, #4]
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	4b0c      	ldr	r3, [pc, #48]	; (8001858 <HAL_I2C_Master_Receive+0x1e8>)
 8001828:	400b      	ands	r3, r1
 800182a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2220      	movs	r2, #32
 8001830:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2200      	movs	r2, #0
 8001838:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	2200      	movs	r2, #0
 8001840:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001844:	2300      	movs	r3, #0
 8001846:	e000      	b.n	800184a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001848:	2302      	movs	r3, #2
  }
}
 800184a:	4618      	mov	r0, r3
 800184c:	3718      	adds	r7, #24
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	80002400 	.word	0x80002400
 8001858:	fe00e800 	.word	0xfe00e800

0800185c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	699b      	ldr	r3, [r3, #24]
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	2b02      	cmp	r3, #2
 8001870:	d103      	bne.n	800187a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2200      	movs	r2, #0
 8001878:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	699b      	ldr	r3, [r3, #24]
 8001880:	f003 0301 	and.w	r3, r3, #1
 8001884:	2b01      	cmp	r3, #1
 8001886:	d007      	beq.n	8001898 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	699a      	ldr	r2, [r3, #24]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f042 0201 	orr.w	r2, r2, #1
 8001896:	619a      	str	r2, [r3, #24]
  }
}
 8001898:	bf00      	nop
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	60f8      	str	r0, [r7, #12]
 80018ac:	60b9      	str	r1, [r7, #8]
 80018ae:	603b      	str	r3, [r7, #0]
 80018b0:	4613      	mov	r3, r2
 80018b2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80018b4:	e031      	b.n	800191a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018bc:	d02d      	beq.n	800191a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018be:	f7ff fae7 	bl	8000e90 <HAL_GetTick>
 80018c2:	4602      	mov	r2, r0
 80018c4:	69bb      	ldr	r3, [r7, #24]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	683a      	ldr	r2, [r7, #0]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d302      	bcc.n	80018d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d122      	bne.n	800191a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	699a      	ldr	r2, [r3, #24]
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	4013      	ands	r3, r2
 80018de:	68ba      	ldr	r2, [r7, #8]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	bf0c      	ite	eq
 80018e4:	2301      	moveq	r3, #1
 80018e6:	2300      	movne	r3, #0
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	461a      	mov	r2, r3
 80018ec:	79fb      	ldrb	r3, [r7, #7]
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d113      	bne.n	800191a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f6:	f043 0220 	orr.w	r2, r3, #32
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	2220      	movs	r2, #32
 8001902:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	2200      	movs	r2, #0
 800190a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	2200      	movs	r2, #0
 8001912:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e00f      	b.n	800193a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	699a      	ldr	r2, [r3, #24]
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	4013      	ands	r3, r2
 8001924:	68ba      	ldr	r2, [r7, #8]
 8001926:	429a      	cmp	r2, r3
 8001928:	bf0c      	ite	eq
 800192a:	2301      	moveq	r3, #1
 800192c:	2300      	movne	r3, #0
 800192e:	b2db      	uxtb	r3, r3
 8001930:	461a      	mov	r2, r3
 8001932:	79fb      	ldrb	r3, [r7, #7]
 8001934:	429a      	cmp	r2, r3
 8001936:	d0be      	beq.n	80018b6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	3710      	adds	r7, #16
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}

08001942 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001942:	b580      	push	{r7, lr}
 8001944:	b084      	sub	sp, #16
 8001946:	af00      	add	r7, sp, #0
 8001948:	60f8      	str	r0, [r7, #12]
 800194a:	60b9      	str	r1, [r7, #8]
 800194c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800194e:	e033      	b.n	80019b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	68b9      	ldr	r1, [r7, #8]
 8001954:	68f8      	ldr	r0, [r7, #12]
 8001956:	f000 f901 	bl	8001b5c <I2C_IsErrorOccurred>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e031      	b.n	80019c8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800196a:	d025      	beq.n	80019b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800196c:	f7ff fa90 	bl	8000e90 <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	68ba      	ldr	r2, [r7, #8]
 8001978:	429a      	cmp	r2, r3
 800197a:	d302      	bcc.n	8001982 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d11a      	bne.n	80019b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	699b      	ldr	r3, [r3, #24]
 8001988:	f003 0302 	and.w	r3, r3, #2
 800198c:	2b02      	cmp	r3, #2
 800198e:	d013      	beq.n	80019b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001994:	f043 0220 	orr.w	r2, r3, #32
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2220      	movs	r2, #32
 80019a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2200      	movs	r2, #0
 80019a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2200      	movs	r2, #0
 80019b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e007      	b.n	80019c8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	699b      	ldr	r3, [r3, #24]
 80019be:	f003 0302 	and.w	r3, r3, #2
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d1c4      	bne.n	8001950 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80019c6:	2300      	movs	r3, #0
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3710      	adds	r7, #16
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	60b9      	str	r1, [r7, #8]
 80019da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80019dc:	e02f      	b.n	8001a3e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	68b9      	ldr	r1, [r7, #8]
 80019e2:	68f8      	ldr	r0, [r7, #12]
 80019e4:	f000 f8ba 	bl	8001b5c <I2C_IsErrorOccurred>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e02d      	b.n	8001a4e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019f2:	f7ff fa4d 	bl	8000e90 <HAL_GetTick>
 80019f6:	4602      	mov	r2, r0
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	68ba      	ldr	r2, [r7, #8]
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d302      	bcc.n	8001a08 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d11a      	bne.n	8001a3e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	699b      	ldr	r3, [r3, #24]
 8001a0e:	f003 0320 	and.w	r3, r3, #32
 8001a12:	2b20      	cmp	r3, #32
 8001a14:	d013      	beq.n	8001a3e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1a:	f043 0220 	orr.w	r2, r3, #32
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2220      	movs	r2, #32
 8001a26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	2200      	movs	r2, #0
 8001a36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e007      	b.n	8001a4e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	699b      	ldr	r3, [r3, #24]
 8001a44:	f003 0320 	and.w	r3, r3, #32
 8001a48:	2b20      	cmp	r3, #32
 8001a4a:	d1c8      	bne.n	80019de <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3710      	adds	r7, #16
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
	...

08001a58 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001a64:	e06b      	b.n	8001b3e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	68b9      	ldr	r1, [r7, #8]
 8001a6a:	68f8      	ldr	r0, [r7, #12]
 8001a6c:	f000 f876 	bl	8001b5c <I2C_IsErrorOccurred>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e069      	b.n	8001b4e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	f003 0320 	and.w	r3, r3, #32
 8001a84:	2b20      	cmp	r3, #32
 8001a86:	d138      	bne.n	8001afa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	699b      	ldr	r3, [r3, #24]
 8001a8e:	f003 0304 	and.w	r3, r3, #4
 8001a92:	2b04      	cmp	r3, #4
 8001a94:	d105      	bne.n	8001aa2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	e055      	b.n	8001b4e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	699b      	ldr	r3, [r3, #24]
 8001aa8:	f003 0310 	and.w	r3, r3, #16
 8001aac:	2b10      	cmp	r3, #16
 8001aae:	d107      	bne.n	8001ac0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2210      	movs	r2, #16
 8001ab6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2204      	movs	r2, #4
 8001abc:	645a      	str	r2, [r3, #68]	; 0x44
 8001abe:	e002      	b.n	8001ac6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	2220      	movs	r2, #32
 8001acc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	6859      	ldr	r1, [r3, #4]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	4b1f      	ldr	r3, [pc, #124]	; (8001b58 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8001ada:	400b      	ands	r3, r1
 8001adc:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	2220      	movs	r2, #32
 8001ae2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	2200      	movs	r2, #0
 8001af2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e029      	b.n	8001b4e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001afa:	f7ff f9c9 	bl	8000e90 <HAL_GetTick>
 8001afe:	4602      	mov	r2, r0
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	68ba      	ldr	r2, [r7, #8]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d302      	bcc.n	8001b10 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d116      	bne.n	8001b3e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	699b      	ldr	r3, [r3, #24]
 8001b16:	f003 0304 	and.w	r3, r3, #4
 8001b1a:	2b04      	cmp	r3, #4
 8001b1c:	d00f      	beq.n	8001b3e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b22:	f043 0220 	orr.w	r2, r3, #32
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2220      	movs	r2, #32
 8001b2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2200      	movs	r2, #0
 8001b36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e007      	b.n	8001b4e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	f003 0304 	and.w	r3, r3, #4
 8001b48:	2b04      	cmp	r3, #4
 8001b4a:	d18c      	bne.n	8001a66 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3710      	adds	r7, #16
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	fe00e800 	.word	0xfe00e800

08001b5c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b08a      	sub	sp, #40	; 0x28
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	699b      	ldr	r3, [r3, #24]
 8001b74:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001b76:	2300      	movs	r3, #0
 8001b78:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001b7e:	69bb      	ldr	r3, [r7, #24]
 8001b80:	f003 0310 	and.w	r3, r3, #16
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d068      	beq.n	8001c5a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2210      	movs	r2, #16
 8001b8e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001b90:	e049      	b.n	8001c26 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b98:	d045      	beq.n	8001c26 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001b9a:	f7ff f979 	bl	8000e90 <HAL_GetTick>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	68ba      	ldr	r2, [r7, #8]
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d302      	bcc.n	8001bb0 <I2C_IsErrorOccurred+0x54>
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d13a      	bne.n	8001c26 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bba:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001bc2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	699b      	ldr	r3, [r3, #24]
 8001bca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001bd2:	d121      	bne.n	8001c18 <I2C_IsErrorOccurred+0xbc>
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001bda:	d01d      	beq.n	8001c18 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001bdc:	7cfb      	ldrb	r3, [r7, #19]
 8001bde:	2b20      	cmp	r3, #32
 8001be0:	d01a      	beq.n	8001c18 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	685a      	ldr	r2, [r3, #4]
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001bf0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001bf2:	f7ff f94d 	bl	8000e90 <HAL_GetTick>
 8001bf6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001bf8:	e00e      	b.n	8001c18 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001bfa:	f7ff f949 	bl	8000e90 <HAL_GetTick>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	2b19      	cmp	r3, #25
 8001c06:	d907      	bls.n	8001c18 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001c08:	6a3b      	ldr	r3, [r7, #32]
 8001c0a:	f043 0320 	orr.w	r3, r3, #32
 8001c0e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8001c16:	e006      	b.n	8001c26 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	699b      	ldr	r3, [r3, #24]
 8001c1e:	f003 0320 	and.w	r3, r3, #32
 8001c22:	2b20      	cmp	r3, #32
 8001c24:	d1e9      	bne.n	8001bfa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	699b      	ldr	r3, [r3, #24]
 8001c2c:	f003 0320 	and.w	r3, r3, #32
 8001c30:	2b20      	cmp	r3, #32
 8001c32:	d003      	beq.n	8001c3c <I2C_IsErrorOccurred+0xe0>
 8001c34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d0aa      	beq.n	8001b92 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001c3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d103      	bne.n	8001c4c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2220      	movs	r2, #32
 8001c4a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001c4c:	6a3b      	ldr	r3, [r7, #32]
 8001c4e:	f043 0304 	orr.w	r3, r3, #4
 8001c52:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	699b      	ldr	r3, [r3, #24]
 8001c60:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d00b      	beq.n	8001c84 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001c6c:	6a3b      	ldr	r3, [r7, #32]
 8001c6e:	f043 0301 	orr.w	r3, r3, #1
 8001c72:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c7c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d00b      	beq.n	8001ca6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001c8e:	6a3b      	ldr	r3, [r7, #32]
 8001c90:	f043 0308 	orr.w	r3, r3, #8
 8001c94:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c9e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d00b      	beq.n	8001cc8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001cb0:	6a3b      	ldr	r3, [r7, #32]
 8001cb2:	f043 0302 	orr.w	r3, r3, #2
 8001cb6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cc0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001cc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d01c      	beq.n	8001d0a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001cd0:	68f8      	ldr	r0, [r7, #12]
 8001cd2:	f7ff fdc3 	bl	800185c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	6859      	ldr	r1, [r3, #4]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	4b0d      	ldr	r3, [pc, #52]	; (8001d18 <I2C_IsErrorOccurred+0x1bc>)
 8001ce2:	400b      	ands	r3, r1
 8001ce4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001cea:	6a3b      	ldr	r3, [r7, #32]
 8001cec:	431a      	orrs	r2, r3
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2220      	movs	r2, #32
 8001cf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2200      	movs	r2, #0
 8001d06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001d0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3728      	adds	r7, #40	; 0x28
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	fe00e800 	.word	0xfe00e800

08001d1c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b087      	sub	sp, #28
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	607b      	str	r3, [r7, #4]
 8001d26:	460b      	mov	r3, r1
 8001d28:	817b      	strh	r3, [r7, #10]
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001d2e:	897b      	ldrh	r3, [r7, #10]
 8001d30:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001d34:	7a7b      	ldrb	r3, [r7, #9]
 8001d36:	041b      	lsls	r3, r3, #16
 8001d38:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001d3c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001d42:	6a3b      	ldr	r3, [r7, #32]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001d4a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	685a      	ldr	r2, [r3, #4]
 8001d52:	6a3b      	ldr	r3, [r7, #32]
 8001d54:	0d5b      	lsrs	r3, r3, #21
 8001d56:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001d5a:	4b08      	ldr	r3, [pc, #32]	; (8001d7c <I2C_TransferConfig+0x60>)
 8001d5c:	430b      	orrs	r3, r1
 8001d5e:	43db      	mvns	r3, r3
 8001d60:	ea02 0103 	and.w	r1, r2, r3
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	697a      	ldr	r2, [r7, #20]
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001d6e:	bf00      	nop
 8001d70:	371c      	adds	r7, #28
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	03ff63ff 	.word	0x03ff63ff

08001d80 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	2b20      	cmp	r3, #32
 8001d94:	d138      	bne.n	8001e08 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d101      	bne.n	8001da4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001da0:	2302      	movs	r3, #2
 8001da2:	e032      	b.n	8001e0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2201      	movs	r2, #1
 8001da8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2224      	movs	r2, #36	; 0x24
 8001db0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f022 0201 	bic.w	r2, r2, #1
 8001dc2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001dd2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	6819      	ldr	r1, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	683a      	ldr	r2, [r7, #0]
 8001de0:	430a      	orrs	r2, r1
 8001de2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f042 0201 	orr.w	r2, r2, #1
 8001df2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2220      	movs	r2, #32
 8001df8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e04:	2300      	movs	r3, #0
 8001e06:	e000      	b.n	8001e0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001e08:	2302      	movs	r3, #2
  }
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr

08001e16 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001e16:	b480      	push	{r7}
 8001e18:	b085      	sub	sp, #20
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
 8001e1e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	2b20      	cmp	r3, #32
 8001e2a:	d139      	bne.n	8001ea0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d101      	bne.n	8001e3a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001e36:	2302      	movs	r3, #2
 8001e38:	e033      	b.n	8001ea2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2224      	movs	r2, #36	; 0x24
 8001e46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f022 0201 	bic.w	r2, r2, #1
 8001e58:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001e68:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	021b      	lsls	r3, r3, #8
 8001e6e:	68fa      	ldr	r2, [r7, #12]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	68fa      	ldr	r2, [r7, #12]
 8001e7a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f042 0201 	orr.w	r2, r2, #1
 8001e8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2220      	movs	r2, #32
 8001e90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2200      	movs	r2, #0
 8001e98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	e000      	b.n	8001ea2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001ea0:	2302      	movs	r3, #2
  }
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3714      	adds	r7, #20
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
	...

08001eb0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001eb4:	4b05      	ldr	r3, [pc, #20]	; (8001ecc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a04      	ldr	r2, [pc, #16]	; (8001ecc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001eba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ebe:	6013      	str	r3, [r2, #0]
}
 8001ec0:	bf00      	nop
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	58000400 	.word	0x58000400

08001ed0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001ed4:	4b04      	ldr	r3, [pc, #16]	; (8001ee8 <HAL_PWREx_GetVoltageRange+0x18>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	58000400 	.word	0x58000400

08001eec <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001ef0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001efa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001efe:	d101      	bne.n	8001f04 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001f00:	2301      	movs	r3, #1
 8001f02:	e000      	b.n	8001f06 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001f14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f22:	6013      	str	r3, [r2, #0]
}
 8001f24:	bf00      	nop
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr

08001f2e <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001f32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f40:	6013      	str	r3, [r2, #0]
}
 8001f42:	bf00      	nop
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001f50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f5a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001f5e:	d101      	bne.n	8001f64 <LL_RCC_HSE_IsReady+0x18>
 8001f60:	2301      	movs	r3, #1
 8001f62:	e000      	b.n	8001f66 <LL_RCC_HSE_IsReady+0x1a>
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr

08001f70 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001f74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f82:	6013      	str	r3, [r2, #0]
}
 8001f84:	bf00      	nop
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr

08001f8e <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001f92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001fa0:	6013      	str	r3, [r2, #0]
}
 8001fa2:	bf00      	nop
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001fb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fbe:	d101      	bne.n	8001fc4 <LL_RCC_HSI_IsReady+0x18>
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e000      	b.n	8001fc6 <LL_RCC_HSI_IsReady+0x1a>
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001fd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	061b      	lsls	r3, r3, #24
 8001fe6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fea:	4313      	orrs	r3, r2
 8001fec:	604b      	str	r3, [r1, #4]
}
 8001fee:	bf00      	nop
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr

08001ffa <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001ffe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002002:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002006:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800200a:	f043 0301 	orr.w	r3, r3, #1
 800200e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002012:	bf00      	nop
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002020:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002024:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002028:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800202c:	f023 0301 	bic.w	r3, r3, #1
 8002030:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002034:	bf00      	nop
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr

0800203e <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 800203e:	b480      	push	{r7}
 8002040:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8002042:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002046:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	2b02      	cmp	r3, #2
 8002050:	d101      	bne.n	8002056 <LL_RCC_HSI48_IsReady+0x18>
 8002052:	2301      	movs	r3, #1
 8002054:	e000      	b.n	8002058 <LL_RCC_HSI48_IsReady+0x1a>
 8002056:	2300      	movs	r3, #0
}
 8002058:	4618      	mov	r0, r3
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr

08002062 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8002062:	b480      	push	{r7}
 8002064:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002066:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800206a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800206e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002072:	f043 0301 	orr.w	r3, r3, #1
 8002076:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800207a:	bf00      	nop
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002088:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800208c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002090:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002094:	f023 0301 	bic.w	r3, r3, #1
 8002098:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800209c:	bf00      	nop
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr

080020a6 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 80020a6:	b480      	push	{r7}
 80020a8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80020aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020b6:	f043 0304 	orr.w	r3, r3, #4
 80020ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80020be:	bf00      	nop
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80020cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020d8:	f023 0304 	bic.w	r3, r3, #4
 80020dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80020e0:	bf00      	nop
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr

080020ea <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80020ea:	b480      	push	{r7}
 80020ec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80020ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d101      	bne.n	8002102 <LL_RCC_LSE_IsReady+0x18>
 80020fe:	2301      	movs	r3, #1
 8002100:	e000      	b.n	8002104 <LL_RCC_LSE_IsReady+0x1a>
 8002102:	2300      	movs	r3, #0
}
 8002104:	4618      	mov	r0, r3
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr

0800210e <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 800210e:	b480      	push	{r7}
 8002110:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002112:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002116:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800211a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800211e:	f043 0301 	orr.w	r3, r3, #1
 8002122:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002126:	bf00      	nop
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002134:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002138:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800213c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002140:	f023 0301 	bic.w	r3, r3, #1
 8002144:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002148:	bf00      	nop
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr

08002152 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8002152:	b480      	push	{r7}
 8002154:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8002156:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800215a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	2b02      	cmp	r3, #2
 8002164:	d101      	bne.n	800216a <LL_RCC_LSI1_IsReady+0x18>
 8002166:	2301      	movs	r3, #1
 8002168:	e000      	b.n	800216c <LL_RCC_LSI1_IsReady+0x1a>
 800216a:	2300      	movs	r3, #0
}
 800216c:	4618      	mov	r0, r3
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr

08002176 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8002176:	b480      	push	{r7}
 8002178:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800217a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800217e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002182:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002186:	f043 0304 	orr.w	r3, r3, #4
 800218a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800218e:	bf00      	nop
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800219c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021a8:	f023 0304 	bic.w	r3, r3, #4
 80021ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80021b0:	bf00      	nop
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr

080021ba <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 80021ba:	b480      	push	{r7}
 80021bc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80021be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021c6:	f003 0308 	and.w	r3, r3, #8
 80021ca:	2b08      	cmp	r3, #8
 80021cc:	d101      	bne.n	80021d2 <LL_RCC_LSI2_IsReady+0x18>
 80021ce:	2301      	movs	r3, #1
 80021d0:	e000      	b.n	80021d4 <LL_RCC_LSI2_IsReady+0x1a>
 80021d2:	2300      	movs	r3, #0
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr

080021de <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 80021de:	b480      	push	{r7}
 80021e0:	b083      	sub	sp, #12
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80021e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021ee:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	021b      	lsls	r3, r3, #8
 80021f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021fa:	4313      	orrs	r3, r2
 80021fc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002200:	bf00      	nop
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002210:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800221a:	f043 0301 	orr.w	r3, r3, #1
 800221e:	6013      	str	r3, [r2, #0]
}
 8002220:	bf00      	nop
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr

0800222a <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800222a:	b480      	push	{r7}
 800222c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800222e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002238:	f023 0301 	bic.w	r3, r3, #1
 800223c:	6013      	str	r3, [r2, #0]
}
 800223e:	bf00      	nop
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800224c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	2b02      	cmp	r3, #2
 8002258:	d101      	bne.n	800225e <LL_RCC_MSI_IsReady+0x16>
 800225a:	2301      	movs	r3, #1
 800225c:	e000      	b.n	8002260 <LL_RCC_MSI_IsReady+0x18>
 800225e:	2300      	movs	r3, #0
}
 8002260:	4618      	mov	r0, r3
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr

0800226a <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 800226a:	b480      	push	{r7}
 800226c:	b083      	sub	sp, #12
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8002272:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800227c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	4313      	orrs	r3, r2
 8002284:	600b      	str	r3, [r1, #0]
}
 8002286:	bf00      	nop
 8002288:	370c      	adds	r7, #12
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr

08002292 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8002292:	b480      	push	{r7}
 8002294:	b083      	sub	sp, #12
 8002296:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002298:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022a2:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2bb0      	cmp	r3, #176	; 0xb0
 80022a8:	d901      	bls.n	80022ae <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 80022aa:	23b0      	movs	r3, #176	; 0xb0
 80022ac:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 80022ae:	687b      	ldr	r3, [r7, #4]
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80022c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	021b      	lsls	r3, r3, #8
 80022d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022d6:	4313      	orrs	r3, r2
 80022d8:	604b      	str	r3, [r1, #4]
}
 80022da:	bf00      	nop
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr

080022e6 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80022e6:	b480      	push	{r7}
 80022e8:	b083      	sub	sp, #12
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80022ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	f023 0203 	bic.w	r2, r3, #3
 80022f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4313      	orrs	r3, r2
 8002300:	608b      	str	r3, [r1, #8]
}
 8002302:	bf00      	nop
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr

0800230e <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800230e:	b480      	push	{r7}
 8002310:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002312:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	f003 030c 	and.w	r3, r3, #12
}
 800231c:	4618      	mov	r0, r3
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr

08002326 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002326:	b480      	push	{r7}
 8002328:	b083      	sub	sp, #12
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800232e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002338:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	4313      	orrs	r3, r2
 8002340:	608b      	str	r3, [r1, #8]
}
 8002342:	bf00      	nop
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr

0800234e <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800234e:	b480      	push	{r7}
 8002350:	b083      	sub	sp, #12
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002356:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800235a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800235e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002362:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4313      	orrs	r3, r2
 800236a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800236e:	bf00      	nop
 8002370:	370c      	adds	r7, #12
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr

0800237a <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 800237a:	b480      	push	{r7}
 800237c:	b083      	sub	sp, #12
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002382:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002386:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800238a:	f023 020f 	bic.w	r2, r3, #15
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	091b      	lsrs	r3, r3, #4
 8002392:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002396:	4313      	orrs	r3, r2
 8002398:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800239c:	bf00      	nop
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80023b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	608b      	str	r3, [r1, #8]
}
 80023c4:	bf00      	nop
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80023d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	608b      	str	r3, [r1, #8]
}
 80023ec:	bf00      	nop
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80023fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002406:	4618      	mov	r0, r3
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr

08002410 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002414:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002418:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800241c:	011b      	lsls	r3, r3, #4
 800241e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002422:	4618      	mov	r0, r3
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002430:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800243a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800243e:	6013      	str	r3, [r2, #0]
}
 8002440:	bf00      	nop
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr

0800244a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800244a:	b480      	push	{r7}
 800244c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800244e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002458:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800245c:	6013      	str	r3, [r2, #0]
}
 800245e:	bf00      	nop
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800246c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002476:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800247a:	d101      	bne.n	8002480 <LL_RCC_PLL_IsReady+0x18>
 800247c:	2301      	movs	r3, #1
 800247e:	e000      	b.n	8002482 <LL_RCC_PLL_IsReady+0x1a>
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002490:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	0a1b      	lsrs	r3, r3, #8
 8002498:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800249c:	4618      	mov	r0, r3
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr

080024a6 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80024a6:	b480      	push	{r7}
 80024a8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80024aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr

080024be <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80024be:	b480      	push	{r7}
 80024c0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80024c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr

080024d6 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80024d6:	b480      	push	{r7}
 80024d8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80024da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	f003 0303 	and.w	r3, r3, #3
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr

080024ee <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80024ee:	b480      	push	{r7}
 80024f0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80024f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002500:	d101      	bne.n	8002506 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002502:	2301      	movs	r3, #1
 8002504:	e000      	b.n	8002508 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002506:	2300      	movs	r3, #0
}
 8002508:	4618      	mov	r0, r3
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr

08002512 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002512:	b480      	push	{r7}
 8002514:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002516:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800251a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800251e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002522:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002526:	d101      	bne.n	800252c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002528:	2301      	movs	r3, #1
 800252a:	e000      	b.n	800252e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800252c:	2300      	movs	r3, #0
}
 800252e:	4618      	mov	r0, r3
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800253c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002540:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002544:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002548:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800254c:	d101      	bne.n	8002552 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800254e:	2301      	movs	r3, #1
 8002550:	e000      	b.n	8002554 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002552:	2300      	movs	r3, #0
}
 8002554:	4618      	mov	r0, r3
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr

0800255e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800255e:	b480      	push	{r7}
 8002560:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002562:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800256c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002570:	d101      	bne.n	8002576 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002572:	2301      	movs	r3, #1
 8002574:	e000      	b.n	8002578 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002576:	2300      	movs	r3, #0
}
 8002578:	4618      	mov	r0, r3
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr

08002582 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002582:	b480      	push	{r7}
 8002584:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002586:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002590:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002594:	d101      	bne.n	800259a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002596:	2301      	movs	r3, #1
 8002598:	e000      	b.n	800259c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800259a:	2300      	movs	r3, #0
}
 800259c:	4618      	mov	r0, r3
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
	...

080025a8 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025a8:	b590      	push	{r4, r7, lr}
 80025aa:	b08d      	sub	sp, #52	; 0x34
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d101      	bne.n	80025ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e363      	b.n	8002c82 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0320 	and.w	r3, r3, #32
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	f000 808d 	beq.w	80026e2 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025c8:	f7ff fea1 	bl	800230e <LL_RCC_GetSysClkSource>
 80025cc:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025ce:	f7ff ff82 	bl	80024d6 <LL_RCC_PLL_GetMainSource>
 80025d2:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80025d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d005      	beq.n	80025e6 <HAL_RCC_OscConfig+0x3e>
 80025da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025dc:	2b0c      	cmp	r3, #12
 80025de:	d147      	bne.n	8002670 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80025e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d144      	bne.n	8002670 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	69db      	ldr	r3, [r3, #28]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d101      	bne.n	80025f2 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e347      	b.n	8002c82 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80025f6:	f7ff fe4c 	bl	8002292 <LL_RCC_MSI_GetRange>
 80025fa:	4603      	mov	r3, r0
 80025fc:	429c      	cmp	r4, r3
 80025fe:	d914      	bls.n	800262a <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002604:	4618      	mov	r0, r3
 8002606:	f000 fd05 	bl	8003014 <RCC_SetFlashLatencyFromMSIRange>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e336      	b.n	8002c82 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002618:	4618      	mov	r0, r3
 800261a:	f7ff fe26 	bl	800226a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a1b      	ldr	r3, [r3, #32]
 8002622:	4618      	mov	r0, r3
 8002624:	f7ff fe4a 	bl	80022bc <LL_RCC_MSI_SetCalibTrimming>
 8002628:	e013      	b.n	8002652 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262e:	4618      	mov	r0, r3
 8002630:	f7ff fe1b 	bl	800226a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6a1b      	ldr	r3, [r3, #32]
 8002638:	4618      	mov	r0, r3
 800263a:	f7ff fe3f 	bl	80022bc <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002642:	4618      	mov	r0, r3
 8002644:	f000 fce6 	bl	8003014 <RCC_SetFlashLatencyFromMSIRange>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e317      	b.n	8002c82 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002652:	f000 fccb 	bl	8002fec <HAL_RCC_GetHCLKFreq>
 8002656:	4603      	mov	r3, r0
 8002658:	4aa4      	ldr	r2, [pc, #656]	; (80028ec <HAL_RCC_OscConfig+0x344>)
 800265a:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800265c:	4ba4      	ldr	r3, [pc, #656]	; (80028f0 <HAL_RCC_OscConfig+0x348>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4618      	mov	r0, r3
 8002662:	f7fe fbc7 	bl	8000df4 <HAL_InitTick>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d039      	beq.n	80026e0 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e308      	b.n	8002c82 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	69db      	ldr	r3, [r3, #28]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d01e      	beq.n	80026b6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002678:	f7ff fdc8 	bl	800220c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800267c:	f7fe fc08 	bl	8000e90 <HAL_GetTick>
 8002680:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002682:	e008      	b.n	8002696 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002684:	f7fe fc04 	bl	8000e90 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b02      	cmp	r3, #2
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e2f5      	b.n	8002c82 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002696:	f7ff fdd7 	bl	8002248 <LL_RCC_MSI_IsReady>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d0f1      	beq.n	8002684 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7ff fde0 	bl	800226a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a1b      	ldr	r3, [r3, #32]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7ff fe04 	bl	80022bc <LL_RCC_MSI_SetCalibTrimming>
 80026b4:	e015      	b.n	80026e2 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80026b6:	f7ff fdb8 	bl	800222a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80026ba:	f7fe fbe9 	bl	8000e90 <HAL_GetTick>
 80026be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80026c0:	e008      	b.n	80026d4 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026c2:	f7fe fbe5 	bl	8000e90 <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d901      	bls.n	80026d4 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e2d6      	b.n	8002c82 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80026d4:	f7ff fdb8 	bl	8002248 <LL_RCC_MSI_IsReady>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d1f1      	bne.n	80026c2 <HAL_RCC_OscConfig+0x11a>
 80026de:	e000      	b.n	80026e2 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80026e0:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0301 	and.w	r3, r3, #1
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d047      	beq.n	800277e <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026ee:	f7ff fe0e 	bl	800230e <LL_RCC_GetSysClkSource>
 80026f2:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026f4:	f7ff feef 	bl	80024d6 <LL_RCC_PLL_GetMainSource>
 80026f8:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80026fa:	6a3b      	ldr	r3, [r7, #32]
 80026fc:	2b08      	cmp	r3, #8
 80026fe:	d005      	beq.n	800270c <HAL_RCC_OscConfig+0x164>
 8002700:	6a3b      	ldr	r3, [r7, #32]
 8002702:	2b0c      	cmp	r3, #12
 8002704:	d108      	bne.n	8002718 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	2b03      	cmp	r3, #3
 800270a:	d105      	bne.n	8002718 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d134      	bne.n	800277e <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e2b4      	b.n	8002c82 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002720:	d102      	bne.n	8002728 <HAL_RCC_OscConfig+0x180>
 8002722:	f7ff fbf5 	bl	8001f10 <LL_RCC_HSE_Enable>
 8002726:	e001      	b.n	800272c <HAL_RCC_OscConfig+0x184>
 8002728:	f7ff fc01 	bl	8001f2e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d012      	beq.n	800275a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002734:	f7fe fbac 	bl	8000e90 <HAL_GetTick>
 8002738:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800273a:	e008      	b.n	800274e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800273c:	f7fe fba8 	bl	8000e90 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b64      	cmp	r3, #100	; 0x64
 8002748:	d901      	bls.n	800274e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e299      	b.n	8002c82 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800274e:	f7ff fbfd 	bl	8001f4c <LL_RCC_HSE_IsReady>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d0f1      	beq.n	800273c <HAL_RCC_OscConfig+0x194>
 8002758:	e011      	b.n	800277e <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800275a:	f7fe fb99 	bl	8000e90 <HAL_GetTick>
 800275e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002760:	e008      	b.n	8002774 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002762:	f7fe fb95 	bl	8000e90 <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	2b64      	cmp	r3, #100	; 0x64
 800276e:	d901      	bls.n	8002774 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	e286      	b.n	8002c82 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002774:	f7ff fbea 	bl	8001f4c <LL_RCC_HSE_IsReady>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d1f1      	bne.n	8002762 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0302 	and.w	r3, r3, #2
 8002786:	2b00      	cmp	r3, #0
 8002788:	d04c      	beq.n	8002824 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800278a:	f7ff fdc0 	bl	800230e <LL_RCC_GetSysClkSource>
 800278e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002790:	f7ff fea1 	bl	80024d6 <LL_RCC_PLL_GetMainSource>
 8002794:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	2b04      	cmp	r3, #4
 800279a:	d005      	beq.n	80027a8 <HAL_RCC_OscConfig+0x200>
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	2b0c      	cmp	r3, #12
 80027a0:	d10e      	bne.n	80027c0 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d10b      	bne.n	80027c0 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d101      	bne.n	80027b4 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e266      	b.n	8002c82 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	691b      	ldr	r3, [r3, #16]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7ff fc09 	bl	8001fd0 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80027be:	e031      	b.n	8002824 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d019      	beq.n	80027fc <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027c8:	f7ff fbd2 	bl	8001f70 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027cc:	f7fe fb60 	bl	8000e90 <HAL_GetTick>
 80027d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80027d2:	e008      	b.n	80027e6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027d4:	f7fe fb5c 	bl	8000e90 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e24d      	b.n	8002c82 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80027e6:	f7ff fbe1 	bl	8001fac <LL_RCC_HSI_IsReady>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d0f1      	beq.n	80027d4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	691b      	ldr	r3, [r3, #16]
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7ff fbeb 	bl	8001fd0 <LL_RCC_HSI_SetCalibTrimming>
 80027fa:	e013      	b.n	8002824 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027fc:	f7ff fbc7 	bl	8001f8e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002800:	f7fe fb46 	bl	8000e90 <HAL_GetTick>
 8002804:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002806:	e008      	b.n	800281a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002808:	f7fe fb42 	bl	8000e90 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b02      	cmp	r3, #2
 8002814:	d901      	bls.n	800281a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e233      	b.n	8002c82 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800281a:	f7ff fbc7 	bl	8001fac <LL_RCC_HSI_IsReady>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d1f1      	bne.n	8002808 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0308 	and.w	r3, r3, #8
 800282c:	2b00      	cmp	r3, #0
 800282e:	d106      	bne.n	800283e <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002838:	2b00      	cmp	r3, #0
 800283a:	f000 80a3 	beq.w	8002984 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	695b      	ldr	r3, [r3, #20]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d076      	beq.n	8002934 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0310 	and.w	r3, r3, #16
 800284e:	2b00      	cmp	r3, #0
 8002850:	d046      	beq.n	80028e0 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8002852:	f7ff fc7e 	bl	8002152 <LL_RCC_LSI1_IsReady>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d113      	bne.n	8002884 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800285c:	f7ff fc57 	bl	800210e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002860:	f7fe fb16 	bl	8000e90 <HAL_GetTick>
 8002864:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002866:	e008      	b.n	800287a <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002868:	f7fe fb12 	bl	8000e90 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b02      	cmp	r3, #2
 8002874:	d901      	bls.n	800287a <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e203      	b.n	8002c82 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800287a:	f7ff fc6a 	bl	8002152 <LL_RCC_LSI1_IsReady>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d0f1      	beq.n	8002868 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8002884:	f7ff fc77 	bl	8002176 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002888:	f7fe fb02 	bl	8000e90 <HAL_GetTick>
 800288c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800288e:	e008      	b.n	80028a2 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002890:	f7fe fafe 	bl	8000e90 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	2b03      	cmp	r3, #3
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e1ef      	b.n	8002c82 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80028a2:	f7ff fc8a 	bl	80021ba <LL_RCC_LSI2_IsReady>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d0f1      	beq.n	8002890 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	699b      	ldr	r3, [r3, #24]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7ff fc94 	bl	80021de <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80028b6:	f7ff fc3b 	bl	8002130 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ba:	f7fe fae9 	bl	8000e90 <HAL_GetTick>
 80028be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80028c0:	e008      	b.n	80028d4 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80028c2:	f7fe fae5 	bl	8000e90 <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d901      	bls.n	80028d4 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e1d6      	b.n	8002c82 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80028d4:	f7ff fc3d 	bl	8002152 <LL_RCC_LSI1_IsReady>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1f1      	bne.n	80028c2 <HAL_RCC_OscConfig+0x31a>
 80028de:	e051      	b.n	8002984 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80028e0:	f7ff fc15 	bl	800210e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e4:	f7fe fad4 	bl	8000e90 <HAL_GetTick>
 80028e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80028ea:	e00c      	b.n	8002906 <HAL_RCC_OscConfig+0x35e>
 80028ec:	20000008 	.word	0x20000008
 80028f0:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80028f4:	f7fe facc 	bl	8000e90 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d901      	bls.n	8002906 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e1bd      	b.n	8002c82 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002906:	f7ff fc24 	bl	8002152 <LL_RCC_LSI1_IsReady>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d0f1      	beq.n	80028f4 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8002910:	f7ff fc42 	bl	8002198 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002914:	e008      	b.n	8002928 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002916:	f7fe fabb 	bl	8000e90 <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	2b03      	cmp	r3, #3
 8002922:	d901      	bls.n	8002928 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e1ac      	b.n	8002c82 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002928:	f7ff fc47 	bl	80021ba <LL_RCC_LSI2_IsReady>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d1f1      	bne.n	8002916 <HAL_RCC_OscConfig+0x36e>
 8002932:	e027      	b.n	8002984 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8002934:	f7ff fc30 	bl	8002198 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002938:	f7fe faaa 	bl	8000e90 <HAL_GetTick>
 800293c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800293e:	e008      	b.n	8002952 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002940:	f7fe faa6 	bl	8000e90 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b03      	cmp	r3, #3
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e197      	b.n	8002c82 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002952:	f7ff fc32 	bl	80021ba <LL_RCC_LSI2_IsReady>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d1f1      	bne.n	8002940 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800295c:	f7ff fbe8 	bl	8002130 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002960:	f7fe fa96 	bl	8000e90 <HAL_GetTick>
 8002964:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002966:	e008      	b.n	800297a <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002968:	f7fe fa92 	bl	8000e90 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b02      	cmp	r3, #2
 8002974:	d901      	bls.n	800297a <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e183      	b.n	8002c82 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800297a:	f7ff fbea 	bl	8002152 <LL_RCC_LSI1_IsReady>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d1f1      	bne.n	8002968 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0304 	and.w	r3, r3, #4
 800298c:	2b00      	cmp	r3, #0
 800298e:	d05b      	beq.n	8002a48 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002990:	4ba7      	ldr	r3, [pc, #668]	; (8002c30 <HAL_RCC_OscConfig+0x688>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002998:	2b00      	cmp	r3, #0
 800299a:	d114      	bne.n	80029c6 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800299c:	f7ff fa88 	bl	8001eb0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029a0:	f7fe fa76 	bl	8000e90 <HAL_GetTick>
 80029a4:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029a6:	e008      	b.n	80029ba <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029a8:	f7fe fa72 	bl	8000e90 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d901      	bls.n	80029ba <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e163      	b.n	8002c82 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029ba:	4b9d      	ldr	r3, [pc, #628]	; (8002c30 <HAL_RCC_OscConfig+0x688>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d0f0      	beq.n	80029a8 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d102      	bne.n	80029d4 <HAL_RCC_OscConfig+0x42c>
 80029ce:	f7ff fb48 	bl	8002062 <LL_RCC_LSE_Enable>
 80029d2:	e00c      	b.n	80029ee <HAL_RCC_OscConfig+0x446>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	2b05      	cmp	r3, #5
 80029da:	d104      	bne.n	80029e6 <HAL_RCC_OscConfig+0x43e>
 80029dc:	f7ff fb63 	bl	80020a6 <LL_RCC_LSE_EnableBypass>
 80029e0:	f7ff fb3f 	bl	8002062 <LL_RCC_LSE_Enable>
 80029e4:	e003      	b.n	80029ee <HAL_RCC_OscConfig+0x446>
 80029e6:	f7ff fb4d 	bl	8002084 <LL_RCC_LSE_Disable>
 80029ea:	f7ff fb6d 	bl	80020c8 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d014      	beq.n	8002a20 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029f6:	f7fe fa4b 	bl	8000e90 <HAL_GetTick>
 80029fa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80029fc:	e00a      	b.n	8002a14 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029fe:	f7fe fa47 	bl	8000e90 <HAL_GetTick>
 8002a02:	4602      	mov	r2, r0
 8002a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d901      	bls.n	8002a14 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e136      	b.n	8002c82 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002a14:	f7ff fb69 	bl	80020ea <LL_RCC_LSE_IsReady>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d0ef      	beq.n	80029fe <HAL_RCC_OscConfig+0x456>
 8002a1e:	e013      	b.n	8002a48 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a20:	f7fe fa36 	bl	8000e90 <HAL_GetTick>
 8002a24:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002a26:	e00a      	b.n	8002a3e <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a28:	f7fe fa32 	bl	8000e90 <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d901      	bls.n	8002a3e <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e121      	b.n	8002c82 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002a3e:	f7ff fb54 	bl	80020ea <LL_RCC_LSE_IsReady>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d1ef      	bne.n	8002a28 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d02c      	beq.n	8002aae <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d014      	beq.n	8002a86 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002a5c:	f7ff facd 	bl	8001ffa <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a60:	f7fe fa16 	bl	8000e90 <HAL_GetTick>
 8002a64:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002a66:	e008      	b.n	8002a7a <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a68:	f7fe fa12 	bl	8000e90 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e103      	b.n	8002c82 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002a7a:	f7ff fae0 	bl	800203e <LL_RCC_HSI48_IsReady>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d0f1      	beq.n	8002a68 <HAL_RCC_OscConfig+0x4c0>
 8002a84:	e013      	b.n	8002aae <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002a86:	f7ff fac9 	bl	800201c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a8a:	f7fe fa01 	bl	8000e90 <HAL_GetTick>
 8002a8e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002a90:	e008      	b.n	8002aa4 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a92:	f7fe f9fd 	bl	8000e90 <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d901      	bls.n	8002aa4 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e0ee      	b.n	8002c82 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002aa4:	f7ff facb 	bl	800203e <LL_RCC_HSI48_IsReady>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d1f1      	bne.n	8002a92 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	f000 80e4 	beq.w	8002c80 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ab8:	f7ff fc29 	bl	800230e <LL_RCC_GetSysClkSource>
 8002abc:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8002abe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	f040 80b4 	bne.w	8002c38 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f003 0203 	and.w	r2, r3, #3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d123      	bne.n	8002b26 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d11c      	bne.n	8002b26 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	0a1b      	lsrs	r3, r3, #8
 8002af0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d114      	bne.n	8002b26 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d10d      	bne.n	8002b26 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d106      	bne.n	8002b26 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d05d      	beq.n	8002be2 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	2b0c      	cmp	r3, #12
 8002b2a:	d058      	beq.n	8002bde <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002b2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d001      	beq.n	8002b3e <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e0a1      	b.n	8002c82 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002b3e:	f7ff fc84 	bl	800244a <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b42:	f7fe f9a5 	bl	8000e90 <HAL_GetTick>
 8002b46:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b48:	e008      	b.n	8002b5c <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b4a:	f7fe f9a1 	bl	8000e90 <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d901      	bls.n	8002b5c <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e092      	b.n	8002c82 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1ef      	bne.n	8002b4a <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b6e:	68da      	ldr	r2, [r3, #12]
 8002b70:	4b30      	ldr	r3, [pc, #192]	; (8002c34 <HAL_RCC_OscConfig+0x68c>)
 8002b72:	4013      	ands	r3, r2
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b7c:	4311      	orrs	r1, r2
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b82:	0212      	lsls	r2, r2, #8
 8002b84:	4311      	orrs	r1, r2
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002b8a:	4311      	orrs	r1, r2
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002b90:	4311      	orrs	r1, r2
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002b96:	430a      	orrs	r2, r1
 8002b98:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002ba0:	f7ff fc44 	bl	800242c <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ba4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bb2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002bb4:	f7fe f96c 	bl	8000e90 <HAL_GetTick>
 8002bb8:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bba:	e008      	b.n	8002bce <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bbc:	f7fe f968 	bl	8000e90 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d901      	bls.n	8002bce <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e059      	b.n	8002c82 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d0ef      	beq.n	8002bbc <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bdc:	e050      	b.n	8002c80 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e04f      	b.n	8002c82 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002be2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d147      	bne.n	8002c80 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002bf0:	f7ff fc1c 	bl	800242c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002bf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c02:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c04:	f7fe f944 	bl	8000e90 <HAL_GetTick>
 8002c08:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c0a:	e008      	b.n	8002c1e <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c0c:	f7fe f940 	bl	8000e90 <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d901      	bls.n	8002c1e <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e031      	b.n	8002c82 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d0ef      	beq.n	8002c0c <HAL_RCC_OscConfig+0x664>
 8002c2c:	e028      	b.n	8002c80 <HAL_RCC_OscConfig+0x6d8>
 8002c2e:	bf00      	nop
 8002c30:	58000400 	.word	0x58000400
 8002c34:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	2b0c      	cmp	r3, #12
 8002c3c:	d01e      	beq.n	8002c7c <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c3e:	f7ff fc04 	bl	800244a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c42:	f7fe f925 	bl	8000e90 <HAL_GetTick>
 8002c46:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c48:	e008      	b.n	8002c5c <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c4a:	f7fe f921 	bl	8000e90 <HAL_GetTick>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d901      	bls.n	8002c5c <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	e012      	b.n	8002c82 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d1ef      	bne.n	8002c4a <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002c6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c6e:	68da      	ldr	r2, [r3, #12]
 8002c70:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c74:	4b05      	ldr	r3, [pc, #20]	; (8002c8c <HAL_RCC_OscConfig+0x6e4>)
 8002c76:	4013      	ands	r3, r2
 8002c78:	60cb      	str	r3, [r1, #12]
 8002c7a:	e001      	b.n	8002c80 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e000      	b.n	8002c82 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3734      	adds	r7, #52	; 0x34
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd90      	pop	{r4, r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	eefefffc 	.word	0xeefefffc

08002c90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d101      	bne.n	8002ca4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e12d      	b.n	8002f00 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ca4:	4b98      	ldr	r3, [pc, #608]	; (8002f08 <HAL_RCC_ClockConfig+0x278>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0307 	and.w	r3, r3, #7
 8002cac:	683a      	ldr	r2, [r7, #0]
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d91b      	bls.n	8002cea <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cb2:	4b95      	ldr	r3, [pc, #596]	; (8002f08 <HAL_RCC_ClockConfig+0x278>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f023 0207 	bic.w	r2, r3, #7
 8002cba:	4993      	ldr	r1, [pc, #588]	; (8002f08 <HAL_RCC_ClockConfig+0x278>)
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cc2:	f7fe f8e5 	bl	8000e90 <HAL_GetTick>
 8002cc6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cc8:	e008      	b.n	8002cdc <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002cca:	f7fe f8e1 	bl	8000e90 <HAL_GetTick>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d901      	bls.n	8002cdc <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	e111      	b.n	8002f00 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cdc:	4b8a      	ldr	r3, [pc, #552]	; (8002f08 <HAL_RCC_ClockConfig+0x278>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0307 	and.w	r3, r3, #7
 8002ce4:	683a      	ldr	r2, [r7, #0]
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d1ef      	bne.n	8002cca <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d016      	beq.n	8002d24 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7ff fb13 	bl	8002326 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002d00:	f7fe f8c6 	bl	8000e90 <HAL_GetTick>
 8002d04:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002d06:	e008      	b.n	8002d1a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002d08:	f7fe f8c2 	bl	8000e90 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d901      	bls.n	8002d1a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e0f2      	b.n	8002f00 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002d1a:	f7ff fbe8 	bl	80024ee <LL_RCC_IsActiveFlag_HPRE>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d0f1      	beq.n	8002d08 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0320 	and.w	r3, r3, #32
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d016      	beq.n	8002d5e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	695b      	ldr	r3, [r3, #20]
 8002d34:	4618      	mov	r0, r3
 8002d36:	f7ff fb0a 	bl	800234e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002d3a:	f7fe f8a9 	bl	8000e90 <HAL_GetTick>
 8002d3e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002d40:	e008      	b.n	8002d54 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002d42:	f7fe f8a5 	bl	8000e90 <HAL_GetTick>
 8002d46:	4602      	mov	r2, r0
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d901      	bls.n	8002d54 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002d50:	2303      	movs	r3, #3
 8002d52:	e0d5      	b.n	8002f00 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002d54:	f7ff fbdd 	bl	8002512 <LL_RCC_IsActiveFlag_C2HPRE>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d0f1      	beq.n	8002d42 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d016      	beq.n	8002d98 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	699b      	ldr	r3, [r3, #24]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7ff fb03 	bl	800237a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002d74:	f7fe f88c 	bl	8000e90 <HAL_GetTick>
 8002d78:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002d7a:	e008      	b.n	8002d8e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002d7c:	f7fe f888 	bl	8000e90 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e0b8      	b.n	8002f00 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002d8e:	f7ff fbd3 	bl	8002538 <LL_RCC_IsActiveFlag_SHDHPRE>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d0f1      	beq.n	8002d7c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0304 	and.w	r3, r3, #4
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d016      	beq.n	8002dd2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7ff fafd 	bl	80023a8 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002dae:	f7fe f86f 	bl	8000e90 <HAL_GetTick>
 8002db2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002db4:	e008      	b.n	8002dc8 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002db6:	f7fe f86b 	bl	8000e90 <HAL_GetTick>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d901      	bls.n	8002dc8 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e09b      	b.n	8002f00 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002dc8:	f7ff fbc9 	bl	800255e <LL_RCC_IsActiveFlag_PPRE1>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d0f1      	beq.n	8002db6 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0308 	and.w	r3, r3, #8
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d017      	beq.n	8002e0e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	691b      	ldr	r3, [r3, #16]
 8002de2:	00db      	lsls	r3, r3, #3
 8002de4:	4618      	mov	r0, r3
 8002de6:	f7ff faf3 	bl	80023d0 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002dea:	f7fe f851 	bl	8000e90 <HAL_GetTick>
 8002dee:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002df0:	e008      	b.n	8002e04 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002df2:	f7fe f84d 	bl	8000e90 <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d901      	bls.n	8002e04 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e07d      	b.n	8002f00 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002e04:	f7ff fbbd 	bl	8002582 <LL_RCC_IsActiveFlag_PPRE2>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d0f1      	beq.n	8002df2 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0301 	and.w	r3, r3, #1
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d043      	beq.n	8002ea2 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d106      	bne.n	8002e30 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002e22:	f7ff f893 	bl	8001f4c <LL_RCC_HSE_IsReady>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d11e      	bne.n	8002e6a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e067      	b.n	8002f00 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	2b03      	cmp	r3, #3
 8002e36:	d106      	bne.n	8002e46 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002e38:	f7ff fb16 	bl	8002468 <LL_RCC_PLL_IsReady>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d113      	bne.n	8002e6a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e05c      	b.n	8002f00 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d106      	bne.n	8002e5c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002e4e:	f7ff f9fb 	bl	8002248 <LL_RCC_MSI_IsReady>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d108      	bne.n	8002e6a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e051      	b.n	8002f00 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002e5c:	f7ff f8a6 	bl	8001fac <LL_RCC_HSI_IsReady>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d101      	bne.n	8002e6a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e04a      	b.n	8002f00 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7ff fa39 	bl	80022e6 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e74:	f7fe f80c 	bl	8000e90 <HAL_GetTick>
 8002e78:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e7a:	e00a      	b.n	8002e92 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e7c:	f7fe f808 	bl	8000e90 <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e036      	b.n	8002f00 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e92:	f7ff fa3c 	bl	800230e <LL_RCC_GetSysClkSource>
 8002e96:	4602      	mov	r2, r0
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d1ec      	bne.n	8002e7c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ea2:	4b19      	ldr	r3, [pc, #100]	; (8002f08 <HAL_RCC_ClockConfig+0x278>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0307 	and.w	r3, r3, #7
 8002eaa:	683a      	ldr	r2, [r7, #0]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d21b      	bcs.n	8002ee8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eb0:	4b15      	ldr	r3, [pc, #84]	; (8002f08 <HAL_RCC_ClockConfig+0x278>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f023 0207 	bic.w	r2, r3, #7
 8002eb8:	4913      	ldr	r1, [pc, #76]	; (8002f08 <HAL_RCC_ClockConfig+0x278>)
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ec0:	f7fd ffe6 	bl	8000e90 <HAL_GetTick>
 8002ec4:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ec6:	e008      	b.n	8002eda <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002ec8:	f7fd ffe2 	bl	8000e90 <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d901      	bls.n	8002eda <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e012      	b.n	8002f00 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eda:	4b0b      	ldr	r3, [pc, #44]	; (8002f08 <HAL_RCC_ClockConfig+0x278>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0307 	and.w	r3, r3, #7
 8002ee2:	683a      	ldr	r2, [r7, #0]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d1ef      	bne.n	8002ec8 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002ee8:	f000 f880 	bl	8002fec <HAL_RCC_GetHCLKFreq>
 8002eec:	4603      	mov	r3, r0
 8002eee:	4a07      	ldr	r2, [pc, #28]	; (8002f0c <HAL_RCC_ClockConfig+0x27c>)
 8002ef0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8002ef2:	f7fd ffd9 	bl	8000ea8 <HAL_GetTickPrio>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f7fd ff7b 	bl	8000df4 <HAL_InitTick>
 8002efe:	4603      	mov	r3, r0
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3710      	adds	r7, #16
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	58004000 	.word	0x58004000
 8002f0c:	20000008 	.word	0x20000008

08002f10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f10:	b590      	push	{r4, r7, lr}
 8002f12:	b085      	sub	sp, #20
 8002f14:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f16:	f7ff f9fa 	bl	800230e <LL_RCC_GetSysClkSource>
 8002f1a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d10a      	bne.n	8002f38 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002f22:	f7ff f9b6 	bl	8002292 <LL_RCC_MSI_GetRange>
 8002f26:	4603      	mov	r3, r0
 8002f28:	091b      	lsrs	r3, r3, #4
 8002f2a:	f003 030f 	and.w	r3, r3, #15
 8002f2e:	4a2b      	ldr	r2, [pc, #172]	; (8002fdc <HAL_RCC_GetSysClockFreq+0xcc>)
 8002f30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f34:	60fb      	str	r3, [r7, #12]
 8002f36:	e04b      	b.n	8002fd0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2b04      	cmp	r3, #4
 8002f3c:	d102      	bne.n	8002f44 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002f3e:	4b28      	ldr	r3, [pc, #160]	; (8002fe0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002f40:	60fb      	str	r3, [r7, #12]
 8002f42:	e045      	b.n	8002fd0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2b08      	cmp	r3, #8
 8002f48:	d10a      	bne.n	8002f60 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002f4a:	f7fe ffcf 	bl	8001eec <LL_RCC_HSE_IsEnabledDiv2>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d102      	bne.n	8002f5a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002f54:	4b23      	ldr	r3, [pc, #140]	; (8002fe4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002f56:	60fb      	str	r3, [r7, #12]
 8002f58:	e03a      	b.n	8002fd0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002f5a:	4b23      	ldr	r3, [pc, #140]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0xd8>)
 8002f5c:	60fb      	str	r3, [r7, #12]
 8002f5e:	e037      	b.n	8002fd0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002f60:	f7ff fab9 	bl	80024d6 <LL_RCC_PLL_GetMainSource>
 8002f64:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d003      	beq.n	8002f74 <HAL_RCC_GetSysClockFreq+0x64>
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	2b03      	cmp	r3, #3
 8002f70:	d003      	beq.n	8002f7a <HAL_RCC_GetSysClockFreq+0x6a>
 8002f72:	e00d      	b.n	8002f90 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002f74:	4b1a      	ldr	r3, [pc, #104]	; (8002fe0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002f76:	60bb      	str	r3, [r7, #8]
        break;
 8002f78:	e015      	b.n	8002fa6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002f7a:	f7fe ffb7 	bl	8001eec <LL_RCC_HSE_IsEnabledDiv2>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d102      	bne.n	8002f8a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002f84:	4b17      	ldr	r3, [pc, #92]	; (8002fe4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002f86:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002f88:	e00d      	b.n	8002fa6 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8002f8a:	4b17      	ldr	r3, [pc, #92]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0xd8>)
 8002f8c:	60bb      	str	r3, [r7, #8]
        break;
 8002f8e:	e00a      	b.n	8002fa6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002f90:	f7ff f97f 	bl	8002292 <LL_RCC_MSI_GetRange>
 8002f94:	4603      	mov	r3, r0
 8002f96:	091b      	lsrs	r3, r3, #4
 8002f98:	f003 030f 	and.w	r3, r3, #15
 8002f9c:	4a0f      	ldr	r2, [pc, #60]	; (8002fdc <HAL_RCC_GetSysClockFreq+0xcc>)
 8002f9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fa2:	60bb      	str	r3, [r7, #8]
        break;
 8002fa4:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8002fa6:	f7ff fa71 	bl	800248c <LL_RCC_PLL_GetN>
 8002faa:	4602      	mov	r2, r0
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	fb03 f402 	mul.w	r4, r3, r2
 8002fb2:	f7ff fa84 	bl	80024be <LL_RCC_PLL_GetDivider>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	091b      	lsrs	r3, r3, #4
 8002fba:	3301      	adds	r3, #1
 8002fbc:	fbb4 f4f3 	udiv	r4, r4, r3
 8002fc0:	f7ff fa71 	bl	80024a6 <LL_RCC_PLL_GetR>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	0f5b      	lsrs	r3, r3, #29
 8002fc8:	3301      	adds	r3, #1
 8002fca:	fbb4 f3f3 	udiv	r3, r4, r3
 8002fce:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3714      	adds	r7, #20
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd90      	pop	{r4, r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	08003aa0 	.word	0x08003aa0
 8002fe0:	00f42400 	.word	0x00f42400
 8002fe4:	003d0900 	.word	0x003d0900
 8002fe8:	007a1200 	.word	0x007a1200

08002fec <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fec:	b598      	push	{r3, r4, r7, lr}
 8002fee:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002ff0:	f7ff ff8e 	bl	8002f10 <HAL_RCC_GetSysClockFreq>
 8002ff4:	4604      	mov	r4, r0
 8002ff6:	f7ff f9ff 	bl	80023f8 <LL_RCC_GetAHBPrescaler>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	091b      	lsrs	r3, r3, #4
 8002ffe:	f003 030f 	and.w	r3, r3, #15
 8003002:	4a03      	ldr	r2, [pc, #12]	; (8003010 <HAL_RCC_GetHCLKFreq+0x24>)
 8003004:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003008:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800300c:	4618      	mov	r0, r3
 800300e:	bd98      	pop	{r3, r4, r7, pc}
 8003010:	08003a60 	.word	0x08003a60

08003014 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003014:	b590      	push	{r4, r7, lr}
 8003016:	b085      	sub	sp, #20
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2bb0      	cmp	r3, #176	; 0xb0
 8003020:	d903      	bls.n	800302a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8003022:	4b15      	ldr	r3, [pc, #84]	; (8003078 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003026:	60fb      	str	r3, [r7, #12]
 8003028:	e007      	b.n	800303a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	091b      	lsrs	r3, r3, #4
 800302e:	f003 030f 	and.w	r3, r3, #15
 8003032:	4a11      	ldr	r2, [pc, #68]	; (8003078 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003034:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003038:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800303a:	f7ff f9e9 	bl	8002410 <LL_RCC_GetAHB4Prescaler>
 800303e:	4603      	mov	r3, r0
 8003040:	091b      	lsrs	r3, r3, #4
 8003042:	f003 030f 	and.w	r3, r3, #15
 8003046:	4a0d      	ldr	r2, [pc, #52]	; (800307c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8003048:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800304c:	68fa      	ldr	r2, [r7, #12]
 800304e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003052:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	4a0a      	ldr	r2, [pc, #40]	; (8003080 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8003058:	fba2 2303 	umull	r2, r3, r2, r3
 800305c:	0c9c      	lsrs	r4, r3, #18
 800305e:	f7fe ff37 	bl	8001ed0 <HAL_PWREx_GetVoltageRange>
 8003062:	4603      	mov	r3, r0
 8003064:	4619      	mov	r1, r3
 8003066:	4620      	mov	r0, r4
 8003068:	f000 f80c 	bl	8003084 <RCC_SetFlashLatency>
 800306c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800306e:	4618      	mov	r0, r3
 8003070:	3714      	adds	r7, #20
 8003072:	46bd      	mov	sp, r7
 8003074:	bd90      	pop	{r4, r7, pc}
 8003076:	bf00      	nop
 8003078:	08003aa0 	.word	0x08003aa0
 800307c:	08003a60 	.word	0x08003a60
 8003080:	431bde83 	.word	0x431bde83

08003084 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003084:	b590      	push	{r4, r7, lr}
 8003086:	b093      	sub	sp, #76	; 0x4c
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800308e:	4b37      	ldr	r3, [pc, #220]	; (800316c <RCC_SetFlashLatency+0xe8>)
 8003090:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8003094:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003096:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800309a:	4a35      	ldr	r2, [pc, #212]	; (8003170 <RCC_SetFlashLatency+0xec>)
 800309c:	f107 031c 	add.w	r3, r7, #28
 80030a0:	ca07      	ldmia	r2, {r0, r1, r2}
 80030a2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80030a6:	4b33      	ldr	r3, [pc, #204]	; (8003174 <RCC_SetFlashLatency+0xf0>)
 80030a8:	f107 040c 	add.w	r4, r7, #12
 80030ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80030ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80030b2:	2300      	movs	r3, #0
 80030b4:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030bc:	d11a      	bne.n	80030f4 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80030be:	2300      	movs	r3, #0
 80030c0:	643b      	str	r3, [r7, #64]	; 0x40
 80030c2:	e013      	b.n	80030ec <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80030c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	3348      	adds	r3, #72	; 0x48
 80030ca:	443b      	add	r3, r7
 80030cc:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d807      	bhi.n	80030e6 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80030d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	3348      	adds	r3, #72	; 0x48
 80030dc:	443b      	add	r3, r7
 80030de:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80030e2:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80030e4:	e020      	b.n	8003128 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80030e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030e8:	3301      	adds	r3, #1
 80030ea:	643b      	str	r3, [r7, #64]	; 0x40
 80030ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030ee:	2b03      	cmp	r3, #3
 80030f0:	d9e8      	bls.n	80030c4 <RCC_SetFlashLatency+0x40>
 80030f2:	e019      	b.n	8003128 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80030f4:	2300      	movs	r3, #0
 80030f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030f8:	e013      	b.n	8003122 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80030fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	3348      	adds	r3, #72	; 0x48
 8003100:	443b      	add	r3, r7
 8003102:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	429a      	cmp	r2, r3
 800310a:	d807      	bhi.n	800311c <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800310c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	3348      	adds	r3, #72	; 0x48
 8003112:	443b      	add	r3, r7
 8003114:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003118:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800311a:	e005      	b.n	8003128 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800311c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800311e:	3301      	adds	r3, #1
 8003120:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003122:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003124:	2b02      	cmp	r3, #2
 8003126:	d9e8      	bls.n	80030fa <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8003128:	4b13      	ldr	r3, [pc, #76]	; (8003178 <RCC_SetFlashLatency+0xf4>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f023 0207 	bic.w	r2, r3, #7
 8003130:	4911      	ldr	r1, [pc, #68]	; (8003178 <RCC_SetFlashLatency+0xf4>)
 8003132:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003134:	4313      	orrs	r3, r2
 8003136:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003138:	f7fd feaa 	bl	8000e90 <HAL_GetTick>
 800313c:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800313e:	e008      	b.n	8003152 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003140:	f7fd fea6 	bl	8000e90 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	2b02      	cmp	r3, #2
 800314c:	d901      	bls.n	8003152 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e007      	b.n	8003162 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003152:	4b09      	ldr	r3, [pc, #36]	; (8003178 <RCC_SetFlashLatency+0xf4>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0307 	and.w	r3, r3, #7
 800315a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800315c:	429a      	cmp	r2, r3
 800315e:	d1ef      	bne.n	8003140 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	374c      	adds	r7, #76	; 0x4c
 8003166:	46bd      	mov	sp, r7
 8003168:	bd90      	pop	{r4, r7, pc}
 800316a:	bf00      	nop
 800316c:	08003a34 	.word	0x08003a34
 8003170:	08003a44 	.word	0x08003a44
 8003174:	08003a50 	.word	0x08003a50
 8003178:	58004000 	.word	0x58004000

0800317c <LL_RCC_LSE_IsEnabled>:
{
 800317c:	b480      	push	{r7}
 800317e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003180:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003184:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003188:	f003 0301 	and.w	r3, r3, #1
 800318c:	2b01      	cmp	r3, #1
 800318e:	d101      	bne.n	8003194 <LL_RCC_LSE_IsEnabled+0x18>
 8003190:	2301      	movs	r3, #1
 8003192:	e000      	b.n	8003196 <LL_RCC_LSE_IsEnabled+0x1a>
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr

080031a0 <LL_RCC_LSE_IsReady>:
{
 80031a0:	b480      	push	{r7}
 80031a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80031a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ac:	f003 0302 	and.w	r3, r3, #2
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d101      	bne.n	80031b8 <LL_RCC_LSE_IsReady+0x18>
 80031b4:	2301      	movs	r3, #1
 80031b6:	e000      	b.n	80031ba <LL_RCC_LSE_IsReady+0x1a>
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr

080031c4 <LL_RCC_SetRFWKPClockSource>:
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80031cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031d4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80031d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	4313      	orrs	r3, r2
 80031e0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80031e4:	bf00      	nop
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <LL_RCC_SetSMPSClockSource>:
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80031f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fe:	f023 0203 	bic.w	r2, r3, #3
 8003202:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4313      	orrs	r3, r2
 800320a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800320c:	bf00      	nop
 800320e:	370c      	adds	r7, #12
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr

08003218 <LL_RCC_SetSMPSPrescaler>:
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8003220:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003226:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800322a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4313      	orrs	r3, r2
 8003232:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003234:	bf00      	nop
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr

08003240 <LL_RCC_SetUSARTClockSource>:
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8003248:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800324c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003250:	f023 0203 	bic.w	r2, r3, #3
 8003254:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4313      	orrs	r3, r2
 800325c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003260:	bf00      	nop
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <LL_RCC_SetLPUARTClockSource>:
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003274:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800327c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003280:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4313      	orrs	r3, r2
 8003288:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800328c:	bf00      	nop
 800328e:	370c      	adds	r7, #12
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr

08003298 <LL_RCC_SetI2CClockSource>:
{
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80032a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032a4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	091b      	lsrs	r3, r3, #4
 80032ac:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80032b0:	43db      	mvns	r3, r3
 80032b2:	401a      	ands	r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	011b      	lsls	r3, r3, #4
 80032b8:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80032bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032c0:	4313      	orrs	r3, r2
 80032c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80032c6:	bf00      	nop
 80032c8:	370c      	adds	r7, #12
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr

080032d2 <LL_RCC_SetLPTIMClockSource>:
{
 80032d2:	b480      	push	{r7}
 80032d4:	b083      	sub	sp, #12
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80032da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032de:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	0c1b      	lsrs	r3, r3, #16
 80032e6:	041b      	lsls	r3, r3, #16
 80032e8:	43db      	mvns	r3, r3
 80032ea:	401a      	ands	r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	041b      	lsls	r3, r3, #16
 80032f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032f4:	4313      	orrs	r3, r2
 80032f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80032fa:	bf00      	nop
 80032fc:	370c      	adds	r7, #12
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr

08003306 <LL_RCC_SetSAIClockSource>:
{
 8003306:	b480      	push	{r7}
 8003308:	b083      	sub	sp, #12
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800330e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003316:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800331a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4313      	orrs	r3, r2
 8003322:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003326:	bf00      	nop
 8003328:	370c      	adds	r7, #12
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr

08003332 <LL_RCC_SetRNGClockSource>:
{
 8003332:	b480      	push	{r7}
 8003334:	b083      	sub	sp, #12
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800333a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800333e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003342:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003346:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4313      	orrs	r3, r2
 800334e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003352:	bf00      	nop
 8003354:	370c      	adds	r7, #12
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr

0800335e <LL_RCC_SetCLK48ClockSource>:
{
 800335e:	b480      	push	{r7}
 8003360:	b083      	sub	sp, #12
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003366:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800336a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800336e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003372:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4313      	orrs	r3, r2
 800337a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800337e:	bf00      	nop
 8003380:	370c      	adds	r7, #12
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr

0800338a <LL_RCC_SetUSBClockSource>:
{
 800338a:	b580      	push	{r7, lr}
 800338c:	b082      	sub	sp, #8
 800338e:	af00      	add	r7, sp, #0
 8003390:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f7ff ffe3 	bl	800335e <LL_RCC_SetCLK48ClockSource>
}
 8003398:	bf00      	nop
 800339a:	3708      	adds	r7, #8
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <LL_RCC_SetADCClockSource>:
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80033a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033b0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80033b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80033c0:	bf00      	nop
 80033c2:	370c      	adds	r7, #12
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr

080033cc <LL_RCC_SetRTCClockSource>:
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80033d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80033ec:	bf00      	nop
 80033ee:	370c      	adds	r7, #12
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr

080033f8 <LL_RCC_GetRTCClockSource>:
{
 80033f8:	b480      	push	{r7}
 80033fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80033fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003400:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003404:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003408:	4618      	mov	r0, r3
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr

08003412 <LL_RCC_ForceBackupDomainReset>:
{
 8003412:	b480      	push	{r7}
 8003414:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003416:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800341a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800341e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003422:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003426:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800342a:	bf00      	nop
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003434:	b480      	push	{r7}
 8003436:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003438:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800343c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003440:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003444:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003448:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800344c:	bf00      	nop
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr

08003456 <LL_RCC_PLLSAI1_Enable>:
{
 8003456:	b480      	push	{r7}
 8003458:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800345a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003464:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003468:	6013      	str	r3, [r2, #0]
}
 800346a:	bf00      	nop
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr

08003474 <LL_RCC_PLLSAI1_Disable>:
{
 8003474:	b480      	push	{r7}
 8003476:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003478:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003482:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003486:	6013      	str	r3, [r2, #0]
}
 8003488:	bf00      	nop
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr

08003492 <LL_RCC_PLLSAI1_IsReady>:
{
 8003492:	b480      	push	{r7}
 8003494:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8003496:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034a4:	d101      	bne.n	80034aa <LL_RCC_PLLSAI1_IsReady+0x18>
 80034a6:	2301      	movs	r3, #1
 80034a8:	e000      	b.n	80034ac <LL_RCC_PLLSAI1_IsReady+0x1a>
 80034aa:	2300      	movs	r3, #0
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr

080034b6 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b088      	sub	sp, #32
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80034be:	2300      	movs	r3, #0
 80034c0:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80034c2:	2300      	movs	r3, #0
 80034c4:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d034      	beq.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80034da:	d021      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80034dc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80034e0:	d81b      	bhi.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x64>
 80034e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80034e6:	d01d      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80034e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80034ec:	d815      	bhi.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x64>
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d00b      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x54>
 80034f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034f6:	d110      	bne.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80034f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003502:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003506:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8003508:	e00d      	b.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	3304      	adds	r3, #4
 800350e:	4618      	mov	r0, r3
 8003510:	f000 f947 	bl	80037a2 <RCCEx_PLLSAI1_ConfigNP>
 8003514:	4603      	mov	r3, r0
 8003516:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003518:	e005      	b.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	77fb      	strb	r3, [r7, #31]
        break;
 800351e:	e002      	b.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003520:	bf00      	nop
 8003522:	e000      	b.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003524:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003526:	7ffb      	ldrb	r3, [r7, #31]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d105      	bne.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003530:	4618      	mov	r0, r3
 8003532:	f7ff fee8 	bl	8003306 <LL_RCC_SetSAIClockSource>
 8003536:	e001      	b.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003538:	7ffb      	ldrb	r3, [r7, #31]
 800353a:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003544:	2b00      	cmp	r3, #0
 8003546:	d046      	beq.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8003548:	f7ff ff56 	bl	80033f8 <LL_RCC_GetRTCClockSource>
 800354c:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003552:	69ba      	ldr	r2, [r7, #24]
 8003554:	429a      	cmp	r2, r3
 8003556:	d03c      	beq.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003558:	f7fe fcaa 	bl	8001eb0 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d105      	bne.n	800356e <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003566:	4618      	mov	r0, r3
 8003568:	f7ff ff30 	bl	80033cc <LL_RCC_SetRTCClockSource>
 800356c:	e02e      	b.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800356e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003576:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8003578:	f7ff ff4b 	bl	8003412 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800357c:	f7ff ff5a 	bl	8003434 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358a:	4313      	orrs	r3, r2
 800358c:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800358e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8003598:	f7ff fdf0 	bl	800317c <LL_RCC_LSE_IsEnabled>
 800359c:	4603      	mov	r3, r0
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d114      	bne.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80035a2:	f7fd fc75 	bl	8000e90 <HAL_GetTick>
 80035a6:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80035a8:	e00b      	b.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035aa:	f7fd fc71 	bl	8000e90 <HAL_GetTick>
 80035ae:	4602      	mov	r2, r0
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d902      	bls.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80035bc:	2303      	movs	r3, #3
 80035be:	77fb      	strb	r3, [r7, #31]
              break;
 80035c0:	e004      	b.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80035c2:	f7ff fded 	bl	80031a0 <LL_RCC_LSE_IsReady>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d1ee      	bne.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80035cc:	7ffb      	ldrb	r3, [r7, #31]
 80035ce:	77bb      	strb	r3, [r7, #30]
 80035d0:	e001      	b.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035d2:	7ffb      	ldrb	r3, [r7, #31]
 80035d4:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0301 	and.w	r3, r3, #1
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d004      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	699b      	ldr	r3, [r3, #24]
 80035e6:	4618      	mov	r0, r3
 80035e8:	f7ff fe2a 	bl	8003240 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0302 	and.w	r3, r3, #2
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d004      	beq.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	69db      	ldr	r3, [r3, #28]
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7ff fe35 	bl	800326c <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0310 	and.w	r3, r3, #16
 800360a:	2b00      	cmp	r3, #0
 800360c:	d004      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003612:	4618      	mov	r0, r3
 8003614:	f7ff fe5d 	bl	80032d2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0320 	and.w	r3, r3, #32
 8003620:	2b00      	cmp	r3, #0
 8003622:	d004      	beq.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003628:	4618      	mov	r0, r3
 800362a:	f7ff fe52 	bl	80032d2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0304 	and.w	r3, r3, #4
 8003636:	2b00      	cmp	r3, #0
 8003638:	d004      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a1b      	ldr	r3, [r3, #32]
 800363e:	4618      	mov	r0, r3
 8003640:	f7ff fe2a 	bl	8003298 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0308 	and.w	r3, r3, #8
 800364c:	2b00      	cmp	r3, #0
 800364e:	d004      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003654:	4618      	mov	r0, r3
 8003656:	f7ff fe1f 	bl	8003298 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003662:	2b00      	cmp	r3, #0
 8003664:	d022      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800366a:	4618      	mov	r0, r3
 800366c:	f7ff fe8d 	bl	800338a <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003674:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003678:	d107      	bne.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800367a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003684:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003688:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800368e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003692:	d10b      	bne.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	3304      	adds	r3, #4
 8003698:	4618      	mov	r0, r3
 800369a:	f000 f8dd 	bl	8003858 <RCCEx_PLLSAI1_ConfigNQ>
 800369e:	4603      	mov	r3, r0
 80036a0:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80036a2:	7ffb      	ldrb	r3, [r7, #31]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d001      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80036a8:	7ffb      	ldrb	r3, [r7, #31]
 80036aa:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d02b      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036c0:	d008      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80036ca:	d003      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d105      	bne.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d8:	4618      	mov	r0, r3
 80036da:	f7ff fe2a 	bl	8003332 <LL_RCC_SetRNGClockSource>
 80036de:	e00a      	b.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036e8:	60fb      	str	r3, [r7, #12]
 80036ea:	2000      	movs	r0, #0
 80036ec:	f7ff fe21 	bl	8003332 <LL_RCC_SetRNGClockSource>
 80036f0:	68f8      	ldr	r0, [r7, #12]
 80036f2:	f7ff fe34 	bl	800335e <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036fa:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80036fe:	d107      	bne.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003700:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800370a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800370e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003718:	2b00      	cmp	r3, #0
 800371a:	d022      	beq.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003720:	4618      	mov	r0, r3
 8003722:	f7ff fe3d 	bl	80033a0 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800372a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800372e:	d107      	bne.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003730:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800373a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800373e:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003744:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003748:	d10b      	bne.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	3304      	adds	r3, #4
 800374e:	4618      	mov	r0, r3
 8003750:	f000 f8dd 	bl	800390e <RCCEx_PLLSAI1_ConfigNR>
 8003754:	4603      	mov	r3, r0
 8003756:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003758:	7ffb      	ldrb	r3, [r7, #31]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d001      	beq.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800375e:	7ffb      	ldrb	r3, [r7, #31]
 8003760:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d004      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003772:	4618      	mov	r0, r3
 8003774:	f7ff fd26 	bl	80031c4 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d009      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003788:	4618      	mov	r0, r3
 800378a:	f7ff fd45 	bl	8003218 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003792:	4618      	mov	r0, r3
 8003794:	f7ff fd2c 	bl	80031f0 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8003798:	7fbb      	ldrb	r3, [r7, #30]
}
 800379a:	4618      	mov	r0, r3
 800379c:	3720      	adds	r7, #32
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}

080037a2 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80037a2:	b580      	push	{r7, lr}
 80037a4:	b084      	sub	sp, #16
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80037aa:	2300      	movs	r3, #0
 80037ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80037ae:	f7ff fe61 	bl	8003474 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80037b2:	f7fd fb6d 	bl	8000e90 <HAL_GetTick>
 80037b6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80037b8:	e009      	b.n	80037ce <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80037ba:	f7fd fb69 	bl	8000e90 <HAL_GetTick>
 80037be:	4602      	mov	r2, r0
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d902      	bls.n	80037ce <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	73fb      	strb	r3, [r7, #15]
      break;
 80037cc:	e004      	b.n	80037d8 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80037ce:	f7ff fe60 	bl	8003492 <LL_RCC_PLLSAI1_IsReady>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d1f0      	bne.n	80037ba <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80037d8:	7bfb      	ldrb	r3, [r7, #15]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d137      	bne.n	800384e <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80037de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037e2:	691b      	ldr	r3, [r3, #16]
 80037e4:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	021b      	lsls	r3, r3, #8
 80037ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037f2:	4313      	orrs	r3, r2
 80037f4:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80037f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037fa:	691b      	ldr	r3, [r3, #16]
 80037fc:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003808:	4313      	orrs	r3, r2
 800380a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800380c:	f7ff fe23 	bl	8003456 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003810:	f7fd fb3e 	bl	8000e90 <HAL_GetTick>
 8003814:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003816:	e009      	b.n	800382c <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003818:	f7fd fb3a 	bl	8000e90 <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	2b02      	cmp	r3, #2
 8003824:	d902      	bls.n	800382c <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	73fb      	strb	r3, [r7, #15]
        break;
 800382a:	e004      	b.n	8003836 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800382c:	f7ff fe31 	bl	8003492 <LL_RCC_PLLSAI1_IsReady>
 8003830:	4603      	mov	r3, r0
 8003832:	2b01      	cmp	r3, #1
 8003834:	d1f0      	bne.n	8003818 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8003836:	7bfb      	ldrb	r3, [r7, #15]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d108      	bne.n	800384e <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800383c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003840:	691a      	ldr	r2, [r3, #16]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	691b      	ldr	r3, [r3, #16]
 8003846:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800384a:	4313      	orrs	r3, r2
 800384c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800384e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003850:	4618      	mov	r0, r3
 8003852:	3710      	adds	r7, #16
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003860:	2300      	movs	r3, #0
 8003862:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003864:	f7ff fe06 	bl	8003474 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003868:	f7fd fb12 	bl	8000e90 <HAL_GetTick>
 800386c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800386e:	e009      	b.n	8003884 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003870:	f7fd fb0e 	bl	8000e90 <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	2b02      	cmp	r3, #2
 800387c:	d902      	bls.n	8003884 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	73fb      	strb	r3, [r7, #15]
      break;
 8003882:	e004      	b.n	800388e <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003884:	f7ff fe05 	bl	8003492 <LL_RCC_PLLSAI1_IsReady>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d1f0      	bne.n	8003870 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800388e:	7bfb      	ldrb	r3, [r7, #15]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d137      	bne.n	8003904 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003894:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	021b      	lsls	r3, r3, #8
 80038a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038a8:	4313      	orrs	r3, r2
 80038aa:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80038ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038be:	4313      	orrs	r3, r2
 80038c0:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80038c2:	f7ff fdc8 	bl	8003456 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038c6:	f7fd fae3 	bl	8000e90 <HAL_GetTick>
 80038ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80038cc:	e009      	b.n	80038e2 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038ce:	f7fd fadf 	bl	8000e90 <HAL_GetTick>
 80038d2:	4602      	mov	r2, r0
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d902      	bls.n	80038e2 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	73fb      	strb	r3, [r7, #15]
        break;
 80038e0:	e004      	b.n	80038ec <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80038e2:	f7ff fdd6 	bl	8003492 <LL_RCC_PLLSAI1_IsReady>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d1f0      	bne.n	80038ce <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80038ec:	7bfb      	ldrb	r3, [r7, #15]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d108      	bne.n	8003904 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80038f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038f6:	691a      	ldr	r2, [r3, #16]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	691b      	ldr	r3, [r3, #16]
 80038fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003900:	4313      	orrs	r3, r2
 8003902:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003904:	7bfb      	ldrb	r3, [r7, #15]
}
 8003906:	4618      	mov	r0, r3
 8003908:	3710      	adds	r7, #16
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}

0800390e <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800390e:	b580      	push	{r7, lr}
 8003910:	b084      	sub	sp, #16
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003916:	2300      	movs	r3, #0
 8003918:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800391a:	f7ff fdab 	bl	8003474 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800391e:	f7fd fab7 	bl	8000e90 <HAL_GetTick>
 8003922:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003924:	e009      	b.n	800393a <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003926:	f7fd fab3 	bl	8000e90 <HAL_GetTick>
 800392a:	4602      	mov	r2, r0
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	2b02      	cmp	r3, #2
 8003932:	d902      	bls.n	800393a <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	73fb      	strb	r3, [r7, #15]
      break;
 8003938:	e004      	b.n	8003944 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800393a:	f7ff fdaa 	bl	8003492 <LL_RCC_PLLSAI1_IsReady>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d1f0      	bne.n	8003926 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8003944:	7bfb      	ldrb	r3, [r7, #15]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d137      	bne.n	80039ba <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800394a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800394e:	691b      	ldr	r3, [r3, #16]
 8003950:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	021b      	lsls	r3, r3, #8
 800395a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800395e:	4313      	orrs	r3, r2
 8003960:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8003962:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003966:	691b      	ldr	r3, [r3, #16]
 8003968:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003974:	4313      	orrs	r3, r2
 8003976:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003978:	f7ff fd6d 	bl	8003456 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800397c:	f7fd fa88 	bl	8000e90 <HAL_GetTick>
 8003980:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003982:	e009      	b.n	8003998 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003984:	f7fd fa84 	bl	8000e90 <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	2b02      	cmp	r3, #2
 8003990:	d902      	bls.n	8003998 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	73fb      	strb	r3, [r7, #15]
        break;
 8003996:	e004      	b.n	80039a2 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003998:	f7ff fd7b 	bl	8003492 <LL_RCC_PLLSAI1_IsReady>
 800399c:	4603      	mov	r3, r0
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d1f0      	bne.n	8003984 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80039a2:	7bfb      	ldrb	r3, [r7, #15]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d108      	bne.n	80039ba <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80039a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039ac:	691a      	ldr	r2, [r3, #16]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039b6:	4313      	orrs	r3, r2
 80039b8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80039ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3710      	adds	r7, #16
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <__libc_init_array>:
 80039c4:	b570      	push	{r4, r5, r6, lr}
 80039c6:	4d0d      	ldr	r5, [pc, #52]	; (80039fc <__libc_init_array+0x38>)
 80039c8:	4c0d      	ldr	r4, [pc, #52]	; (8003a00 <__libc_init_array+0x3c>)
 80039ca:	1b64      	subs	r4, r4, r5
 80039cc:	10a4      	asrs	r4, r4, #2
 80039ce:	2600      	movs	r6, #0
 80039d0:	42a6      	cmp	r6, r4
 80039d2:	d109      	bne.n	80039e8 <__libc_init_array+0x24>
 80039d4:	4d0b      	ldr	r5, [pc, #44]	; (8003a04 <__libc_init_array+0x40>)
 80039d6:	4c0c      	ldr	r4, [pc, #48]	; (8003a08 <__libc_init_array+0x44>)
 80039d8:	f000 f820 	bl	8003a1c <_init>
 80039dc:	1b64      	subs	r4, r4, r5
 80039de:	10a4      	asrs	r4, r4, #2
 80039e0:	2600      	movs	r6, #0
 80039e2:	42a6      	cmp	r6, r4
 80039e4:	d105      	bne.n	80039f2 <__libc_init_array+0x2e>
 80039e6:	bd70      	pop	{r4, r5, r6, pc}
 80039e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80039ec:	4798      	blx	r3
 80039ee:	3601      	adds	r6, #1
 80039f0:	e7ee      	b.n	80039d0 <__libc_init_array+0xc>
 80039f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80039f6:	4798      	blx	r3
 80039f8:	3601      	adds	r6, #1
 80039fa:	e7f2      	b.n	80039e2 <__libc_init_array+0x1e>
 80039fc:	08003ae0 	.word	0x08003ae0
 8003a00:	08003ae0 	.word	0x08003ae0
 8003a04:	08003ae0 	.word	0x08003ae0
 8003a08:	08003ae4 	.word	0x08003ae4

08003a0c <memset>:
 8003a0c:	4402      	add	r2, r0
 8003a0e:	4603      	mov	r3, r0
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d100      	bne.n	8003a16 <memset+0xa>
 8003a14:	4770      	bx	lr
 8003a16:	f803 1b01 	strb.w	r1, [r3], #1
 8003a1a:	e7f9      	b.n	8003a10 <memset+0x4>

08003a1c <_init>:
 8003a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a1e:	bf00      	nop
 8003a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a22:	bc08      	pop	{r3}
 8003a24:	469e      	mov	lr, r3
 8003a26:	4770      	bx	lr

08003a28 <_fini>:
 8003a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a2a:	bf00      	nop
 8003a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a2e:	bc08      	pop	{r3}
 8003a30:	469e      	mov	lr, r3
 8003a32:	4770      	bx	lr
